//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("7.0.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("07/19/2012 17:26:32")]

namespace ORTEC {
	[System.Windows.Forms.AxHost.ClsidAttribute("{1df7ba9b-d1c6-48ea-8963-986199802c29}")]
	[System.ComponentModel.DesignerCategory("Code")]
	[System.ComponentModel.DesignTimeVisibleAttribute(true)]
	[System.ComponentModel.DefaultEvent("ReportStabAdjustment")]
	public class AxUKern : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUKern ocx;
        
        private AxUKernEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUKern() : 
                base("1df7ba9b-d1c6-48ea-8963-986199802c29") {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual UMCBIKERNELLib.XAMP IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual UMCBIKERNELLib.XInfo IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XHVPS IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Locked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Locked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Locked;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual string LockOwner {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockOwner", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LockOwner;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual string Address {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Address;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Address = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IsOpen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOpen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsOpen;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual bool Active {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Active", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Active;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual string Key {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Key;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual int UMCBIHandle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UMCBIHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UMCBIHandle;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual string Password {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Password;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Password = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual string AppDataName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual string AppDataValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual int ErrMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMajor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMajor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual int ErrMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMinor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMinor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual int Error {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Error;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Error = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(37)]
        public virtual bool AutoPasswordRequest {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoPasswordRequest;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoPasswordRequest = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(41)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
        }
        
        public event _DUKernEvents_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUKernEvents_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUKernEvents_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUKernEvents_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUKernEvents_ReportADCDataEventHandler ReportADCData;
        
        public event _DUKernEvents_ReportADCSampleEventHandler ReportADCSample;
        
        public event _DUKernEvents_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUKernEvents_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUKernEvents_ReportErrorEventHandler ReportError;
        
        public event _DUKernEvents_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUKernEvents_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUKernEvents_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUKernEvents_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUKernEvents_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUKernEvents_ReportSettingsChangeEventHandler ReportSettingsChange;
        
        public event _DUKernEvents_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUKernEvents_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUKernEvents_ReportInfoEventHandler ReportInfo;
        
        public event _DUKernEvents_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUKernEvents_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUKernEvents_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUKernEvents_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUKernEvents_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual string Comm(string command) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Comm", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.Comm(command)));
            return returnValue;
        }
        
        public virtual void Open() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Open();
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void Start() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Start", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Start();
        }
        
        public virtual void Stop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Stop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Stop();
        }
        
        public virtual void UnlockInput() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UnlockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UnlockInput();
        }
        
        public virtual void LockInput(string lockOwner) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LockInput(lockOwner);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        public virtual bool get_IsFeature(UMCBIKERNELLib.MIOFEATURES featureNumber) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsFeature", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_IsFeature(featureNumber)));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUKernEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUKernEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUKern)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUKernEvents_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUKernEvents_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUKernEvents_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUKernEvents_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUKernEvents_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSample(object sender, _DUKernEvents_ReportADCSampleEvent e) {
            if ((this.ReportADCSample != null)) {
                this.ReportADCSample(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUKernEvents_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUKernEvents_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportError(object sender, _DUKernEvents_ReportErrorEvent e) {
            if ((this.ReportError != null)) {
                this.ReportError(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUKernEvents_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUKernEvents_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUKernEvents_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUKernEvents_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUKernEvents_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportSettingsChange(object sender, _DUKernEvents_ReportSettingsChangeEvent e) {
            if ((this.ReportSettingsChange != null)) {
                this.ReportSettingsChange(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUKernEvents_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUKernEvents_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUKernEvents_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUKernEvents_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUKernEvents_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUKernEvents_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUKernEvents_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUKernEvents_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
    }
    
    public delegate void _DUKernEvents_ReportStabAdjustmentEventHandler(object sender, _DUKernEvents_ReportStabAdjustmentEvent e);
    
    public class _DUKernEvents_ReportStabAdjustmentEvent {
        
        public double dGainAdjustPercent;
        
        public double dZeroAdjustPercent;
        
        public int lGainAdjust;
        
        public int lZeroAdjust;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportStabAdjustmentEvent(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            this.dGainAdjustPercent = dGainAdjustPercent;
            this.dZeroAdjustPercent = dZeroAdjustPercent;
            this.lGainAdjust = lGainAdjust;
            this.lZeroAdjust = lZeroAdjust;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportStabilizerEventHandler(object sender, _DUKernEvents_ReportStabilizerEvent e);
    
    public class _DUKernEvents_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int lZeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.lZeroWidth = lZeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportADCStatusEventHandler(object sender, _DUKernEvents_ReportADCStatusEvent e);
    
    public class _DUKernEvents_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportADCSettingsEventHandler(object sender, _DUKernEvents_ReportADCSettingsEvent e);
    
    public class _DUKernEvents_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportADCDataEventHandler(object sender, _DUKernEvents_ReportADCDataEvent e);
    
    public class _DUKernEvents_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportADCSampleEventHandler(object sender, _DUKernEvents_ReportADCSampleEvent e);
    
    public class _DUKernEvents_ReportADCSampleEvent {
        
        public int lLength;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportADCSampleEvent(int lLength, int lElapsedMS) {
            this.lLength = lLength;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportUncPresetEventHandler(object sender, _DUKernEvents_ReportUncPresetEvent e);
    
    public class _DUKernEvents_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportGenPresetsEventHandler(object sender, _DUKernEvents_ReportGenPresetsEvent e);
    
    public class _DUKernEvents_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportErrorEventHandler(object sender, _DUKernEvents_ReportErrorEvent e);
    
    public class _DUKernEvents_ReportErrorEvent {
        
        public int scError;
        
        public string szError;
        
        public int lUMCBIError;
        
        public int lUMCBIErrMajor;
        
        public int lUMCBIErrMinor;
        
        public int bInstrumentOpen;
        
        public _DUKernEvents_ReportErrorEvent(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            this.scError = scError;
            this.szError = szError;
            this.lUMCBIError = lUMCBIError;
            this.lUMCBIErrMajor = lUMCBIErrMajor;
            this.lUMCBIErrMinor = lUMCBIErrMinor;
            this.bInstrumentOpen = bInstrumentOpen;
        }
    }
    
    public delegate void _DUKernEvents_ReportAMPGainEventHandler(object sender, _DUKernEvents_ReportAMPGainEvent e);
    
    public class _DUKernEvents_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportAMPSettingsEventHandler(object sender, _DUKernEvents_ReportAMPSettingsEvent e);
    
    public class _DUKernEvents_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportAMPStatusEventHandler(object sender, _DUKernEvents_ReportAMPStatusEvent e);
    
    public class _DUKernEvents_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportHVSettingsEventHandler(object sender, _DUKernEvents_ReportHVSettingsEvent e);
    
    public class _DUKernEvents_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportHVStatusEventHandler(object sender, _DUKernEvents_ReportHVStatusEvent e);
    
    public class _DUKernEvents_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportSettingsChangeEventHandler(object sender, _DUKernEvents_ReportSettingsChangeEvent e);
    
    public class _DUKernEvents_ReportSettingsChangeEvent {
        
        public int lSettingsClass;
        
        public _DUKernEvents_ReportSettingsChangeEvent(int lSettingsClass) {
            this.lSettingsClass = lSettingsClass;
        }
    }
    
    public delegate void _DUKernEvents_ReportMDAPresetEventHandler(object sender, _DUKernEvents_ReportMDAPresetEvent e);
    
    public class _DUKernEvents_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUKernEvents_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUKernEvents_ReportMDACoefficientsEventHandler(object sender, _DUKernEvents_ReportMDACoefficientsEvent e);
    
    public class _DUKernEvents_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUKernEvents_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUKernEvents_ReportInfoEventHandler(object sender, _DUKernEvents_ReportInfoEvent e);
    
    public class _DUKernEvents_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportAMPAdvancedEventHandler(object sender, _DUKernEvents_ReportAMPAdvancedEvent e);
    
    public class _DUKernEvents_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportMonitorEventHandler(object sender, _DUKernEvents_ReportMonitorEvent e);
    
    public class _DUKernEvents_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUKernEvents_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUKernEvents_ReportPowerSettingsEventHandler(object sender, _DUKernEvents_ReportPowerSettingsEvent e);
    
    public class _DUKernEvents_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportPowerStatusEventHandler(object sender, _DUKernEvents_ReportPowerStatusEvent e);
    
    public class _DUKernEvents_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKernEvents_ReportAMPSpecialEventHandler(object sender, _DUKernEvents_ReportAMPSpecialEvent e);
    
    public class _DUKernEvents_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKernEvents_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUKernEventMulticaster : UMCBIKERNELLib._DUKernEvents {
        
        private AxUKern parent;
        
        public AxUKernEventMulticaster(AxUKern parent) {
            this.parent = parent;
        }
        
        public virtual void ReportStabAdjustment(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUKernEvents_ReportStabAdjustmentEvent(dGainAdjustPercent, dZeroAdjustPercent, lGainAdjust, lZeroAdjust, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportStabilizerEvent reportstabilizerEvent = new _DUKernEvents_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, lZeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUKernEvents_ReportADCStatusEvent reportadcstatusEvent = new _DUKernEvents_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUKernEvents_ReportADCSettingsEvent reportadcsettingsEvent = new _DUKernEvents_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUKernEvents_ReportADCDataEvent reportadcdataEvent = new _DUKernEvents_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportADCSample(int lLength, int lElapsedMS) {
            _DUKernEvents_ReportADCSampleEvent reportadcsampleEvent = new _DUKernEvents_ReportADCSampleEvent(lLength, lElapsedMS);
            this.parent.RaiseOnReportADCSample(this.parent, reportadcsampleEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUKernEvents_ReportUncPresetEvent reportuncpresetEvent = new _DUKernEvents_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUKernEvents_ReportGenPresetsEvent reportgenpresetsEvent = new _DUKernEvents_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportError(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            _DUKernEvents_ReportErrorEvent reporterrorEvent = new _DUKernEvents_ReportErrorEvent(scError, szError, lUMCBIError, lUMCBIErrMajor, lUMCBIErrMinor, bInstrumentOpen);
            this.parent.RaiseOnReportError(this.parent, reporterrorEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportAMPGainEvent reportampgainEvent = new _DUKernEvents_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportAMPSettingsEvent reportampsettingsEvent = new _DUKernEvents_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUKernEvents_ReportAMPStatusEvent reportampstatusEvent = new _DUKernEvents_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportHVSettingsEvent reporthvsettingsEvent = new _DUKernEvents_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportHVStatusEvent reporthvstatusEvent = new _DUKernEvents_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportSettingsChange(int lSettingsClass) {
            _DUKernEvents_ReportSettingsChangeEvent reportsettingschangeEvent = new _DUKernEvents_ReportSettingsChangeEvent(lSettingsClass);
            this.parent.RaiseOnReportSettingsChange(this.parent, reportsettingschangeEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUKernEvents_ReportMDAPresetEvent reportmdapresetEvent = new _DUKernEvents_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUKernEvents_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUKernEvents_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUKernEvents_ReportInfoEvent reportinfoEvent = new _DUKernEvents_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUKernEvents_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUKernEvents_ReportMonitorEvent reportmonitorEvent = new _DUKernEvents_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUKernEvents_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportPowerStatusEvent reportpowerstatusEvent = new _DUKernEvents_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUKernEvents_ReportAMPSpecialEvent reportampspecialEvent = new _DUKernEvents_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{a29464e8-60f4-4dc3-bb27-996ef5cbed8e}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportADCSettings")]
    public class AxKernelBuffer : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUBuffer ocx;
        
        private AxKernelBufferEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxKernelBuffer() : 
                base("a29464e8-60f4-4dc3-bb27-996ef5cbed8e") {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XAMP IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XInfo IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual UMCBIKERNELLib.XHVPS IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Loaded {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Loaded", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Loaded;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual object HardRecs {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecs", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
        }
        
        public event _DUBufferEvents_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUBufferEvents_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUBufferEvents_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUBufferEvents_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUBufferEvents_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUBufferEvents_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUBufferEvents_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUBufferEvents_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUBufferEvents_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUBufferEvents_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUBufferEvents_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUBufferEvents_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUBufferEvents_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUBufferEvents_ReportInfoEventHandler ReportInfo;
        
        public event _DUBufferEvents_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUBufferEvents_ReportADCDataEventHandler ReportADCData;
        
        public event _DUBufferEvents_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUBufferEvents_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUBufferEvents_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUBufferEvents_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual void LoadFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadFile(szFilePath);
        }
        
        public virtual void Load(object piuObject) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Load", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Load(piuObject);
        }
        
        public virtual void SaveSPCFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveSPCFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveSPCFile(szFilePath);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxKernelBufferEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUBufferEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUBuffer)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUBufferEvents_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUBufferEvents_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUBufferEvents_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUBufferEvents_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUBufferEvents_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUBufferEvents_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUBufferEvents_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUBufferEvents_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUBufferEvents_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUBufferEvents_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUBufferEvents_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUBufferEvents_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUBufferEvents_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUBufferEvents_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUBufferEvents_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUBufferEvents_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUBufferEvents_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUBufferEvents_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUBufferEvents_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUBufferEvents_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
    }
    
    public delegate void _DUBufferEvents_ReportADCSettingsEventHandler(object sender, _DUBufferEvents_ReportADCSettingsEvent e);
    
    public class _DUBufferEvents_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportADCStatusEventHandler(object sender, _DUBufferEvents_ReportADCStatusEvent e);
    
    public class _DUBufferEvents_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportStabilizerEventHandler(object sender, _DUBufferEvents_ReportStabilizerEvent e);
    
    public class _DUBufferEvents_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int zeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.zeroWidth = zeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportStabAdjustmentEventHandler(object sender, _DUBufferEvents_ReportStabAdjustmentEvent e);
    
    public class _DUBufferEvents_ReportStabAdjustmentEvent {
        
        public double dGainPct;
        
        public double dZeroPct;
        
        public int lGainAdj;
        
        public int lZeroAdj;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportStabAdjustmentEvent(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            this.dGainPct = dGainPct;
            this.dZeroPct = dZeroPct;
            this.lGainAdj = lGainAdj;
            this.lZeroAdj = lZeroAdj;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportGenPresetsEventHandler(object sender, _DUBufferEvents_ReportGenPresetsEvent e);
    
    public class _DUBufferEvents_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportUncPresetEventHandler(object sender, _DUBufferEvents_ReportUncPresetEvent e);
    
    public class _DUBufferEvents_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportAMPGainEventHandler(object sender, _DUBufferEvents_ReportAMPGainEvent e);
    
    public class _DUBufferEvents_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportAMPSettingsEventHandler(object sender, _DUBufferEvents_ReportAMPSettingsEvent e);
    
    public class _DUBufferEvents_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportAMPStatusEventHandler(object sender, _DUBufferEvents_ReportAMPStatusEvent e);
    
    public class _DUBufferEvents_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportHVSettingsEventHandler(object sender, _DUBufferEvents_ReportHVSettingsEvent e);
    
    public class _DUBufferEvents_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportHVStatusEventHandler(object sender, _DUBufferEvents_ReportHVStatusEvent e);
    
    public class _DUBufferEvents_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportMDAPresetEventHandler(object sender, _DUBufferEvents_ReportMDAPresetEvent e);
    
    public class _DUBufferEvents_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUBufferEvents_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUBufferEvents_ReportMDACoefficientsEventHandler(object sender, _DUBufferEvents_ReportMDACoefficientsEvent e);
    
    public class _DUBufferEvents_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUBufferEvents_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUBufferEvents_ReportInfoEventHandler(object sender, _DUBufferEvents_ReportInfoEvent e);
    
    public class _DUBufferEvents_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportAMPAdvancedEventHandler(object sender, _DUBufferEvents_ReportAMPAdvancedEvent e);
    
    public class _DUBufferEvents_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportADCDataEventHandler(object sender, _DUBufferEvents_ReportADCDataEvent e);
    
    public class _DUBufferEvents_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportMonitorEventHandler(object sender, _DUBufferEvents_ReportMonitorEvent e);
    
    public class _DUBufferEvents_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUBufferEvents_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUBufferEvents_ReportPowerSettingsEventHandler(object sender, _DUBufferEvents_ReportPowerSettingsEvent e);
    
    public class _DUBufferEvents_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportPowerStatusEventHandler(object sender, _DUBufferEvents_ReportPowerStatusEvent e);
    
    public class _DUBufferEvents_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBufferEvents_ReportAMPSpecialEventHandler(object sender, _DUBufferEvents_ReportAMPSpecialEvent e);
    
    public class _DUBufferEvents_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBufferEvents_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxKernelBufferEventMulticaster : UMCBIKERNELLib._DUBufferEvents {
        
        private AxKernelBuffer parent;
        
        public AxKernelBufferEventMulticaster(AxKernelBuffer parent) {
            this.parent = parent;
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUBufferEvents_ReportADCSettingsEvent reportadcsettingsEvent = new _DUBufferEvents_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUBufferEvents_ReportADCStatusEvent reportadcstatusEvent = new _DUBufferEvents_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportStabilizerEvent reportstabilizerEvent = new _DUBufferEvents_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, zeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportStabAdjustment(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUBufferEvents_ReportStabAdjustmentEvent(dGainPct, dZeroPct, lGainAdj, lZeroAdj, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUBufferEvents_ReportGenPresetsEvent reportgenpresetsEvent = new _DUBufferEvents_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUBufferEvents_ReportUncPresetEvent reportuncpresetEvent = new _DUBufferEvents_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportAMPGainEvent reportampgainEvent = new _DUBufferEvents_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportAMPSettingsEvent reportampsettingsEvent = new _DUBufferEvents_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportAMPStatusEvent reportampstatusEvent = new _DUBufferEvents_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportHVSettingsEvent reporthvsettingsEvent = new _DUBufferEvents_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportHVStatusEvent reporthvstatusEvent = new _DUBufferEvents_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUBufferEvents_ReportMDAPresetEvent reportmdapresetEvent = new _DUBufferEvents_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUBufferEvents_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUBufferEvents_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUBufferEvents_ReportInfoEvent reportinfoEvent = new _DUBufferEvents_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUBufferEvents_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUBufferEvents_ReportADCDataEvent reportadcdataEvent = new _DUBufferEvents_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUBufferEvents_ReportMonitorEvent reportmonitorEvent = new _DUBufferEvents_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUBufferEvents_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportPowerStatusEvent reportpowerstatusEvent = new _DUBufferEvents_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUBufferEvents_ReportAMPSpecialEvent reportampspecialEvent = new _DUBufferEvents_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{fc51a16a-4205-41ba-b39c-bbe37acf03a3}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportStabAdjustment")]
    public class AxUKern2 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUKern2 ocx;
        
        private AxUKern2EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUKern2() : 
                base("fc51a16a-4205-41ba-b39c-bbe37acf03a3") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual UMCBIKERNELLib.XAMP2 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual UMCBIKERNELLib.XInfo IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XHVPS IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Locked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Locked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Locked;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual string LockOwner {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockOwner", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LockOwner;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual string Address {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Address;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Address = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IsOpen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOpen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsOpen;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual bool Active {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Active", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Active;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual string Key {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Key;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual int UMCBIHandle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UMCBIHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UMCBIHandle;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual string Password {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Password;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Password = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual string AppDataName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual string AppDataValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual int ErrMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMajor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMajor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual int ErrMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMinor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMinor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual int Error {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Error;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Error = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(37)]
        public virtual bool AutoPasswordRequest {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoPasswordRequest;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoPasswordRequest = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(41)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(42)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(43)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual int DebugLevel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DebugLevel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DebugLevel = value;
            }
        }
        
        public event _DUKern2Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUKern2Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUKern2Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUKern2Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUKern2Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUKern2Events_ReportADCSampleEventHandler ReportADCSample;
        
        public event _DUKern2Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUKern2Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUKern2Events_ReportErrorEventHandler ReportError;
        
        public event _DUKern2Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUKern2Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUKern2Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUKern2Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUKern2Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUKern2Events_ReportSettingsChangeEventHandler ReportSettingsChange;
        
        public event _DUKern2Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUKern2Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUKern2Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUKern2Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUKern2Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUKern2Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUKern2Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUKern2Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUKern2Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual string Comm(string command) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Comm", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.Comm(command)));
            return returnValue;
        }
        
        public virtual void Open() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Open();
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void Start() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Start", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Start();
        }
        
        public virtual void Stop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Stop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Stop();
        }
        
        public virtual void UnlockInput() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UnlockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UnlockInput();
        }
        
        public virtual void LockInput(string lockOwner) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LockInput(lockOwner);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        public virtual bool get_IsFeature(UMCBIKERNELLib.MIOFEATURES featureNumber) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsFeature", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_IsFeature(featureNumber)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUKern2EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUKern2Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUKern2)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUKern2Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUKern2Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUKern2Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUKern2Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUKern2Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSample(object sender, _DUKern2Events_ReportADCSampleEvent e) {
            if ((this.ReportADCSample != null)) {
                this.ReportADCSample(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUKern2Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUKern2Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportError(object sender, _DUKern2Events_ReportErrorEvent e) {
            if ((this.ReportError != null)) {
                this.ReportError(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUKern2Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUKern2Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUKern2Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUKern2Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUKern2Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportSettingsChange(object sender, _DUKern2Events_ReportSettingsChangeEvent e) {
            if ((this.ReportSettingsChange != null)) {
                this.ReportSettingsChange(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUKern2Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUKern2Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUKern2Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUKern2Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUKern2Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUKern2Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUKern2Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUKern2Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUKern2Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
    }
    
    public delegate void _DUKern2Events_ReportStabAdjustmentEventHandler(object sender, _DUKern2Events_ReportStabAdjustmentEvent e);
    
    public class _DUKern2Events_ReportStabAdjustmentEvent {
        
        public double dGainAdjustPercent;
        
        public double dZeroAdjustPercent;
        
        public int lGainAdjust;
        
        public int lZeroAdjust;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportStabAdjustmentEvent(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            this.dGainAdjustPercent = dGainAdjustPercent;
            this.dZeroAdjustPercent = dZeroAdjustPercent;
            this.lGainAdjust = lGainAdjust;
            this.lZeroAdjust = lZeroAdjust;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportStabilizerEventHandler(object sender, _DUKern2Events_ReportStabilizerEvent e);
    
    public class _DUKern2Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int lZeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.lZeroWidth = lZeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportADCStatusEventHandler(object sender, _DUKern2Events_ReportADCStatusEvent e);
    
    public class _DUKern2Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportADCSettingsEventHandler(object sender, _DUKern2Events_ReportADCSettingsEvent e);
    
    public class _DUKern2Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportADCDataEventHandler(object sender, _DUKern2Events_ReportADCDataEvent e);
    
    public class _DUKern2Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportADCSampleEventHandler(object sender, _DUKern2Events_ReportADCSampleEvent e);
    
    public class _DUKern2Events_ReportADCSampleEvent {
        
        public int lLength;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportADCSampleEvent(int lLength, int lElapsedMS) {
            this.lLength = lLength;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportUncPresetEventHandler(object sender, _DUKern2Events_ReportUncPresetEvent e);
    
    public class _DUKern2Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportGenPresetsEventHandler(object sender, _DUKern2Events_ReportGenPresetsEvent e);
    
    public class _DUKern2Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportErrorEventHandler(object sender, _DUKern2Events_ReportErrorEvent e);
    
    public class _DUKern2Events_ReportErrorEvent {
        
        public int scError;
        
        public string szError;
        
        public int lUMCBIError;
        
        public int lUMCBIErrMajor;
        
        public int lUMCBIErrMinor;
        
        public int bInstrumentOpen;
        
        public _DUKern2Events_ReportErrorEvent(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            this.scError = scError;
            this.szError = szError;
            this.lUMCBIError = lUMCBIError;
            this.lUMCBIErrMajor = lUMCBIErrMajor;
            this.lUMCBIErrMinor = lUMCBIErrMinor;
            this.bInstrumentOpen = bInstrumentOpen;
        }
    }
    
    public delegate void _DUKern2Events_ReportAMPGainEventHandler(object sender, _DUKern2Events_ReportAMPGainEvent e);
    
    public class _DUKern2Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportAMPSettingsEventHandler(object sender, _DUKern2Events_ReportAMPSettingsEvent e);
    
    public class _DUKern2Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportAMPStatusEventHandler(object sender, _DUKern2Events_ReportAMPStatusEvent e);
    
    public class _DUKern2Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportHVSettingsEventHandler(object sender, _DUKern2Events_ReportHVSettingsEvent e);
    
    public class _DUKern2Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportHVStatusEventHandler(object sender, _DUKern2Events_ReportHVStatusEvent e);
    
    public class _DUKern2Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportSettingsChangeEventHandler(object sender, _DUKern2Events_ReportSettingsChangeEvent e);
    
    public class _DUKern2Events_ReportSettingsChangeEvent {
        
        public int lSettingsClass;
        
        public _DUKern2Events_ReportSettingsChangeEvent(int lSettingsClass) {
            this.lSettingsClass = lSettingsClass;
        }
    }
    
    public delegate void _DUKern2Events_ReportMDAPresetEventHandler(object sender, _DUKern2Events_ReportMDAPresetEvent e);
    
    public class _DUKern2Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUKern2Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUKern2Events_ReportMDACoefficientsEventHandler(object sender, _DUKern2Events_ReportMDACoefficientsEvent e);
    
    public class _DUKern2Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUKern2Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUKern2Events_ReportInfoEventHandler(object sender, _DUKern2Events_ReportInfoEvent e);
    
    public class _DUKern2Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportAMPAdvancedEventHandler(object sender, _DUKern2Events_ReportAMPAdvancedEvent e);
    
    public class _DUKern2Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportMonitorEventHandler(object sender, _DUKern2Events_ReportMonitorEvent e);
    
    public class _DUKern2Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUKern2Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUKern2Events_ReportPowerSettingsEventHandler(object sender, _DUKern2Events_ReportPowerSettingsEvent e);
    
    public class _DUKern2Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportPowerStatusEventHandler(object sender, _DUKern2Events_ReportPowerStatusEvent e);
    
    public class _DUKern2Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportAMPSpecialEventHandler(object sender, _DUKern2Events_ReportAMPSpecialEvent e);
    
    public class _DUKern2Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern2Events_ReportAMPPROEventHandler(object sender, _DUKern2Events_ReportAMPPROEvent e);
    
    public class _DUKern2Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern2Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUKern2EventMulticaster : UMCBIKERNELLib._DUKern2Events {
        
        private AxUKern2 parent;
        
        public AxUKern2EventMulticaster(AxUKern2 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportStabAdjustment(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUKern2Events_ReportStabAdjustmentEvent(dGainAdjustPercent, dZeroAdjustPercent, lGainAdjust, lZeroAdjust, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportStabilizerEvent reportstabilizerEvent = new _DUKern2Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, lZeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUKern2Events_ReportADCStatusEvent reportadcstatusEvent = new _DUKern2Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUKern2Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUKern2Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUKern2Events_ReportADCDataEvent reportadcdataEvent = new _DUKern2Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportADCSample(int lLength, int lElapsedMS) {
            _DUKern2Events_ReportADCSampleEvent reportadcsampleEvent = new _DUKern2Events_ReportADCSampleEvent(lLength, lElapsedMS);
            this.parent.RaiseOnReportADCSample(this.parent, reportadcsampleEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUKern2Events_ReportUncPresetEvent reportuncpresetEvent = new _DUKern2Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUKern2Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUKern2Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportError(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            _DUKern2Events_ReportErrorEvent reporterrorEvent = new _DUKern2Events_ReportErrorEvent(scError, szError, lUMCBIError, lUMCBIErrMajor, lUMCBIErrMinor, bInstrumentOpen);
            this.parent.RaiseOnReportError(this.parent, reporterrorEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportAMPGainEvent reportampgainEvent = new _DUKern2Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUKern2Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUKern2Events_ReportAMPStatusEvent reportampstatusEvent = new _DUKern2Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUKern2Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportHVStatusEvent reporthvstatusEvent = new _DUKern2Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportSettingsChange(int lSettingsClass) {
            _DUKern2Events_ReportSettingsChangeEvent reportsettingschangeEvent = new _DUKern2Events_ReportSettingsChangeEvent(lSettingsClass);
            this.parent.RaiseOnReportSettingsChange(this.parent, reportsettingschangeEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUKern2Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUKern2Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUKern2Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUKern2Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUKern2Events_ReportInfoEvent reportinfoEvent = new _DUKern2Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUKern2Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUKern2Events_ReportMonitorEvent reportmonitorEvent = new _DUKern2Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUKern2Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUKern2Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUKern2Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUKern2Events_ReportAMPPROEvent reportampproEvent = new _DUKern2Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{b3f071fa-6be6-41ef-96f3-81ac3aa263cd}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportStabAdjustment")]
    public class AxUKern3 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUKern3 ocx;
        
        private AxUKern3EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUKern3() : 
                base("b3f071fa-6be6-41ef-96f3-81ac3aa263cd") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual UMCBIKERNELLib.XAMP2 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual UMCBIKERNELLib.XInfo3 IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XHVPS IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Locked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Locked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Locked;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual string LockOwner {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockOwner", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LockOwner;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual string Address {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Address;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Address = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IsOpen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOpen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsOpen;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual bool Active {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Active", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Active;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual string Key {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Key;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual int UMCBIHandle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UMCBIHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UMCBIHandle;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual string Password {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Password;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Password = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual string AppDataName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual string AppDataValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual int ErrMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMajor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMajor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual int ErrMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMinor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMinor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual int Error {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Error;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Error = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(37)]
        public virtual bool AutoPasswordRequest {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoPasswordRequest;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoPasswordRequest = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(41)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(42)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(43)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual int DebugLevel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DebugLevel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DebugLevel = value;
            }
        }
        
        public event _DUKern3Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUKern3Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUKern3Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUKern3Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUKern3Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUKern3Events_ReportADCSampleEventHandler ReportADCSample;
        
        public event _DUKern3Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUKern3Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUKern3Events_ReportErrorEventHandler ReportError;
        
        public event _DUKern3Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUKern3Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUKern3Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUKern3Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUKern3Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUKern3Events_ReportSettingsChangeEventHandler ReportSettingsChange;
        
        public event _DUKern3Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUKern3Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUKern3Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUKern3Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUKern3Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUKern3Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUKern3Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUKern3Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUKern3Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual string Comm(string command) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Comm", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.Comm(command)));
            return returnValue;
        }
        
        public virtual void Open() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Open();
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void Start() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Start", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Start();
        }
        
        public virtual void Stop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Stop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Stop();
        }
        
        public virtual void UnlockInput() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UnlockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UnlockInput();
        }
        
        public virtual void LockInput(string lockOwner) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LockInput(lockOwner);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        public virtual bool get_IsFeature(UMCBIKERNELLib.MIOFEATURES featureNumber) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsFeature", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_IsFeature(featureNumber)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUKern3EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUKern3Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUKern3)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUKern3Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUKern3Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUKern3Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUKern3Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUKern3Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSample(object sender, _DUKern3Events_ReportADCSampleEvent e) {
            if ((this.ReportADCSample != null)) {
                this.ReportADCSample(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUKern3Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUKern3Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportError(object sender, _DUKern3Events_ReportErrorEvent e) {
            if ((this.ReportError != null)) {
                this.ReportError(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUKern3Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUKern3Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUKern3Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUKern3Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUKern3Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportSettingsChange(object sender, _DUKern3Events_ReportSettingsChangeEvent e) {
            if ((this.ReportSettingsChange != null)) {
                this.ReportSettingsChange(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUKern3Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUKern3Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUKern3Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUKern3Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUKern3Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUKern3Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUKern3Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUKern3Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUKern3Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
    }
    
    public delegate void _DUKern3Events_ReportStabAdjustmentEventHandler(object sender, _DUKern3Events_ReportStabAdjustmentEvent e);
    
    public class _DUKern3Events_ReportStabAdjustmentEvent {
        
        public double dGainAdjustPercent;
        
        public double dZeroAdjustPercent;
        
        public int lGainAdjust;
        
        public int lZeroAdjust;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportStabAdjustmentEvent(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            this.dGainAdjustPercent = dGainAdjustPercent;
            this.dZeroAdjustPercent = dZeroAdjustPercent;
            this.lGainAdjust = lGainAdjust;
            this.lZeroAdjust = lZeroAdjust;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportStabilizerEventHandler(object sender, _DUKern3Events_ReportStabilizerEvent e);
    
    public class _DUKern3Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int lZeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.lZeroWidth = lZeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportADCStatusEventHandler(object sender, _DUKern3Events_ReportADCStatusEvent e);
    
    public class _DUKern3Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportADCSettingsEventHandler(object sender, _DUKern3Events_ReportADCSettingsEvent e);
    
    public class _DUKern3Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportADCDataEventHandler(object sender, _DUKern3Events_ReportADCDataEvent e);
    
    public class _DUKern3Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportADCSampleEventHandler(object sender, _DUKern3Events_ReportADCSampleEvent e);
    
    public class _DUKern3Events_ReportADCSampleEvent {
        
        public int lLength;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportADCSampleEvent(int lLength, int lElapsedMS) {
            this.lLength = lLength;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportUncPresetEventHandler(object sender, _DUKern3Events_ReportUncPresetEvent e);
    
    public class _DUKern3Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportGenPresetsEventHandler(object sender, _DUKern3Events_ReportGenPresetsEvent e);
    
    public class _DUKern3Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportErrorEventHandler(object sender, _DUKern3Events_ReportErrorEvent e);
    
    public class _DUKern3Events_ReportErrorEvent {
        
        public int scError;
        
        public string szError;
        
        public int lUMCBIError;
        
        public int lUMCBIErrMajor;
        
        public int lUMCBIErrMinor;
        
        public int bInstrumentOpen;
        
        public _DUKern3Events_ReportErrorEvent(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            this.scError = scError;
            this.szError = szError;
            this.lUMCBIError = lUMCBIError;
            this.lUMCBIErrMajor = lUMCBIErrMajor;
            this.lUMCBIErrMinor = lUMCBIErrMinor;
            this.bInstrumentOpen = bInstrumentOpen;
        }
    }
    
    public delegate void _DUKern3Events_ReportAMPGainEventHandler(object sender, _DUKern3Events_ReportAMPGainEvent e);
    
    public class _DUKern3Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportAMPSettingsEventHandler(object sender, _DUKern3Events_ReportAMPSettingsEvent e);
    
    public class _DUKern3Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportAMPStatusEventHandler(object sender, _DUKern3Events_ReportAMPStatusEvent e);
    
    public class _DUKern3Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportHVSettingsEventHandler(object sender, _DUKern3Events_ReportHVSettingsEvent e);
    
    public class _DUKern3Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportHVStatusEventHandler(object sender, _DUKern3Events_ReportHVStatusEvent e);
    
    public class _DUKern3Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportSettingsChangeEventHandler(object sender, _DUKern3Events_ReportSettingsChangeEvent e);
    
    public class _DUKern3Events_ReportSettingsChangeEvent {
        
        public int lSettingsClass;
        
        public _DUKern3Events_ReportSettingsChangeEvent(int lSettingsClass) {
            this.lSettingsClass = lSettingsClass;
        }
    }
    
    public delegate void _DUKern3Events_ReportMDAPresetEventHandler(object sender, _DUKern3Events_ReportMDAPresetEvent e);
    
    public class _DUKern3Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUKern3Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUKern3Events_ReportMDACoefficientsEventHandler(object sender, _DUKern3Events_ReportMDACoefficientsEvent e);
    
    public class _DUKern3Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUKern3Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUKern3Events_ReportInfoEventHandler(object sender, _DUKern3Events_ReportInfoEvent e);
    
    public class _DUKern3Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportAMPAdvancedEventHandler(object sender, _DUKern3Events_ReportAMPAdvancedEvent e);
    
    public class _DUKern3Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportMonitorEventHandler(object sender, _DUKern3Events_ReportMonitorEvent e);
    
    public class _DUKern3Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUKern3Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUKern3Events_ReportPowerSettingsEventHandler(object sender, _DUKern3Events_ReportPowerSettingsEvent e);
    
    public class _DUKern3Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportPowerStatusEventHandler(object sender, _DUKern3Events_ReportPowerStatusEvent e);
    
    public class _DUKern3Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportAMPSpecialEventHandler(object sender, _DUKern3Events_ReportAMPSpecialEvent e);
    
    public class _DUKern3Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern3Events_ReportAMPPROEventHandler(object sender, _DUKern3Events_ReportAMPPROEvent e);
    
    public class _DUKern3Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern3Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUKern3EventMulticaster : UMCBIKERNELLib._DUKern3Events {
        
        private AxUKern3 parent;
        
        public AxUKern3EventMulticaster(AxUKern3 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportStabAdjustment(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUKern3Events_ReportStabAdjustmentEvent(dGainAdjustPercent, dZeroAdjustPercent, lGainAdjust, lZeroAdjust, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportStabilizerEvent reportstabilizerEvent = new _DUKern3Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, lZeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUKern3Events_ReportADCStatusEvent reportadcstatusEvent = new _DUKern3Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUKern3Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUKern3Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUKern3Events_ReportADCDataEvent reportadcdataEvent = new _DUKern3Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportADCSample(int lLength, int lElapsedMS) {
            _DUKern3Events_ReportADCSampleEvent reportadcsampleEvent = new _DUKern3Events_ReportADCSampleEvent(lLength, lElapsedMS);
            this.parent.RaiseOnReportADCSample(this.parent, reportadcsampleEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUKern3Events_ReportUncPresetEvent reportuncpresetEvent = new _DUKern3Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUKern3Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUKern3Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportError(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            _DUKern3Events_ReportErrorEvent reporterrorEvent = new _DUKern3Events_ReportErrorEvent(scError, szError, lUMCBIError, lUMCBIErrMajor, lUMCBIErrMinor, bInstrumentOpen);
            this.parent.RaiseOnReportError(this.parent, reporterrorEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportAMPGainEvent reportampgainEvent = new _DUKern3Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUKern3Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUKern3Events_ReportAMPStatusEvent reportampstatusEvent = new _DUKern3Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUKern3Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportHVStatusEvent reporthvstatusEvent = new _DUKern3Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportSettingsChange(int lSettingsClass) {
            _DUKern3Events_ReportSettingsChangeEvent reportsettingschangeEvent = new _DUKern3Events_ReportSettingsChangeEvent(lSettingsClass);
            this.parent.RaiseOnReportSettingsChange(this.parent, reportsettingschangeEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUKern3Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUKern3Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUKern3Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUKern3Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUKern3Events_ReportInfoEvent reportinfoEvent = new _DUKern3Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUKern3Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUKern3Events_ReportMonitorEvent reportmonitorEvent = new _DUKern3Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUKern3Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUKern3Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUKern3Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUKern3Events_ReportAMPPROEvent reportampproEvent = new _DUKern3Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{ce818e3f-6326-464f-b4b6-ff0fd4c9500f}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportStabAdjustment")]
    public class AxUKern4 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUKern4 ocx;
        
        private AxUKern4EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUKern4() : 
                base("ce818e3f-6326-464f-b4b6-ff0fd4c9500f") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual UMCBIKERNELLib.XAMP2 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual UMCBIKERNELLib.XInfo4 IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XHVPS IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Locked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Locked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Locked;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual string LockOwner {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockOwner", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LockOwner;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual string Address {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Address;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Address = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IsOpen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOpen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsOpen;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual bool Active {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Active", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Active;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual string Key {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Key;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual int UMCBIHandle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UMCBIHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UMCBIHandle;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual string Password {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Password;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Password = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual string AppDataName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual string AppDataValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual int ErrMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMajor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMajor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual int ErrMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMinor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMinor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual int Error {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Error;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Error = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(37)]
        public virtual bool AutoPasswordRequest {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoPasswordRequest;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoPasswordRequest = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(41)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(42)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(43)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual int DebugLevel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DebugLevel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DebugLevel = value;
            }
        }
        
        public event _DUKern4Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUKern4Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUKern4Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUKern4Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUKern4Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUKern4Events_ReportADCSampleEventHandler ReportADCSample;
        
        public event _DUKern4Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUKern4Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUKern4Events_ReportErrorEventHandler ReportError;
        
        public event _DUKern4Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUKern4Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUKern4Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUKern4Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUKern4Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUKern4Events_ReportSettingsChangeEventHandler ReportSettingsChange;
        
        public event _DUKern4Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUKern4Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUKern4Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUKern4Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUKern4Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUKern4Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUKern4Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUKern4Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUKern4Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public event _DUKern4Events_ReportAlphaEventHandler ReportAlpha;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual string Comm(string command) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Comm", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.Comm(command)));
            return returnValue;
        }
        
        public virtual void Open() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Open();
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void Start() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Start", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Start();
        }
        
        public virtual void Stop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Stop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Stop();
        }
        
        public virtual void UnlockInput() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UnlockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UnlockInput();
        }
        
        public virtual void LockInput(string lockOwner) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LockInput(lockOwner);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        public virtual bool get_IsFeature(UMCBIKERNELLib.MIOFEATURES featureNumber) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsFeature", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_IsFeature(featureNumber)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUKern4EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUKern4Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUKern4)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUKern4Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUKern4Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUKern4Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUKern4Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUKern4Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSample(object sender, _DUKern4Events_ReportADCSampleEvent e) {
            if ((this.ReportADCSample != null)) {
                this.ReportADCSample(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUKern4Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUKern4Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportError(object sender, _DUKern4Events_ReportErrorEvent e) {
            if ((this.ReportError != null)) {
                this.ReportError(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUKern4Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUKern4Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUKern4Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUKern4Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUKern4Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportSettingsChange(object sender, _DUKern4Events_ReportSettingsChangeEvent e) {
            if ((this.ReportSettingsChange != null)) {
                this.ReportSettingsChange(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUKern4Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUKern4Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUKern4Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUKern4Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUKern4Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUKern4Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUKern4Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUKern4Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUKern4Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
        
        internal void RaiseOnReportAlpha(object sender, _DUKern4Events_ReportAlphaEvent e) {
            if ((this.ReportAlpha != null)) {
                this.ReportAlpha(sender, e);
            }
        }
    }
    
    public delegate void _DUKern4Events_ReportStabAdjustmentEventHandler(object sender, _DUKern4Events_ReportStabAdjustmentEvent e);
    
    public class _DUKern4Events_ReportStabAdjustmentEvent {
        
        public double dGainAdjustPercent;
        
        public double dZeroAdjustPercent;
        
        public int lGainAdjust;
        
        public int lZeroAdjust;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportStabAdjustmentEvent(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            this.dGainAdjustPercent = dGainAdjustPercent;
            this.dZeroAdjustPercent = dZeroAdjustPercent;
            this.lGainAdjust = lGainAdjust;
            this.lZeroAdjust = lZeroAdjust;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportStabilizerEventHandler(object sender, _DUKern4Events_ReportStabilizerEvent e);
    
    public class _DUKern4Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int lZeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.lZeroWidth = lZeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportADCStatusEventHandler(object sender, _DUKern4Events_ReportADCStatusEvent e);
    
    public class _DUKern4Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportADCSettingsEventHandler(object sender, _DUKern4Events_ReportADCSettingsEvent e);
    
    public class _DUKern4Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportADCDataEventHandler(object sender, _DUKern4Events_ReportADCDataEvent e);
    
    public class _DUKern4Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportADCSampleEventHandler(object sender, _DUKern4Events_ReportADCSampleEvent e);
    
    public class _DUKern4Events_ReportADCSampleEvent {
        
        public int lLength;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportADCSampleEvent(int lLength, int lElapsedMS) {
            this.lLength = lLength;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportUncPresetEventHandler(object sender, _DUKern4Events_ReportUncPresetEvent e);
    
    public class _DUKern4Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportGenPresetsEventHandler(object sender, _DUKern4Events_ReportGenPresetsEvent e);
    
    public class _DUKern4Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportErrorEventHandler(object sender, _DUKern4Events_ReportErrorEvent e);
    
    public class _DUKern4Events_ReportErrorEvent {
        
        public int scError;
        
        public string szError;
        
        public int lUMCBIError;
        
        public int lUMCBIErrMajor;
        
        public int lUMCBIErrMinor;
        
        public int bInstrumentOpen;
        
        public _DUKern4Events_ReportErrorEvent(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            this.scError = scError;
            this.szError = szError;
            this.lUMCBIError = lUMCBIError;
            this.lUMCBIErrMajor = lUMCBIErrMajor;
            this.lUMCBIErrMinor = lUMCBIErrMinor;
            this.bInstrumentOpen = bInstrumentOpen;
        }
    }
    
    public delegate void _DUKern4Events_ReportAMPGainEventHandler(object sender, _DUKern4Events_ReportAMPGainEvent e);
    
    public class _DUKern4Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportAMPSettingsEventHandler(object sender, _DUKern4Events_ReportAMPSettingsEvent e);
    
    public class _DUKern4Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportAMPStatusEventHandler(object sender, _DUKern4Events_ReportAMPStatusEvent e);
    
    public class _DUKern4Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportHVSettingsEventHandler(object sender, _DUKern4Events_ReportHVSettingsEvent e);
    
    public class _DUKern4Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportHVStatusEventHandler(object sender, _DUKern4Events_ReportHVStatusEvent e);
    
    public class _DUKern4Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportSettingsChangeEventHandler(object sender, _DUKern4Events_ReportSettingsChangeEvent e);
    
    public class _DUKern4Events_ReportSettingsChangeEvent {
        
        public int lSettingsClass;
        
        public _DUKern4Events_ReportSettingsChangeEvent(int lSettingsClass) {
            this.lSettingsClass = lSettingsClass;
        }
    }
    
    public delegate void _DUKern4Events_ReportMDAPresetEventHandler(object sender, _DUKern4Events_ReportMDAPresetEvent e);
    
    public class _DUKern4Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUKern4Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUKern4Events_ReportMDACoefficientsEventHandler(object sender, _DUKern4Events_ReportMDACoefficientsEvent e);
    
    public class _DUKern4Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUKern4Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUKern4Events_ReportInfoEventHandler(object sender, _DUKern4Events_ReportInfoEvent e);
    
    public class _DUKern4Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportAMPAdvancedEventHandler(object sender, _DUKern4Events_ReportAMPAdvancedEvent e);
    
    public class _DUKern4Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportMonitorEventHandler(object sender, _DUKern4Events_ReportMonitorEvent e);
    
    public class _DUKern4Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUKern4Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUKern4Events_ReportPowerSettingsEventHandler(object sender, _DUKern4Events_ReportPowerSettingsEvent e);
    
    public class _DUKern4Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportPowerStatusEventHandler(object sender, _DUKern4Events_ReportPowerStatusEvent e);
    
    public class _DUKern4Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportAMPSpecialEventHandler(object sender, _DUKern4Events_ReportAMPSpecialEvent e);
    
    public class _DUKern4Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportAMPPROEventHandler(object sender, _DUKern4Events_ReportAMPPROEvent e);
    
    public class _DUKern4Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern4Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern4Events_ReportAlphaEventHandler(object sender, _DUKern4Events_ReportAlphaEvent e);
    
    public class _DUKern4Events_ReportAlphaEvent {
        
        public int vacuumState;
        
        public double vacuumTarget;
        
        public int bPulserOn;
        
        public int plrVal;
        
        public int digiOffset;
        
        public int configChan;
        
        public int bRcapOn;
        
        public _DUKern4Events_ReportAlphaEvent(int vacuumState, double vacuumTarget, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            this.vacuumState = vacuumState;
            this.vacuumTarget = vacuumTarget;
            this.bPulserOn = bPulserOn;
            this.plrVal = plrVal;
            this.digiOffset = digiOffset;
            this.configChan = configChan;
            this.bRcapOn = bRcapOn;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUKern4EventMulticaster : UMCBIKERNELLib._DUKern4Events {
        
        private AxUKern4 parent;
        
        public AxUKern4EventMulticaster(AxUKern4 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportStabAdjustment(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUKern4Events_ReportStabAdjustmentEvent(dGainAdjustPercent, dZeroAdjustPercent, lGainAdjust, lZeroAdjust, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportStabilizerEvent reportstabilizerEvent = new _DUKern4Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, lZeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUKern4Events_ReportADCStatusEvent reportadcstatusEvent = new _DUKern4Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUKern4Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUKern4Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUKern4Events_ReportADCDataEvent reportadcdataEvent = new _DUKern4Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportADCSample(int lLength, int lElapsedMS) {
            _DUKern4Events_ReportADCSampleEvent reportadcsampleEvent = new _DUKern4Events_ReportADCSampleEvent(lLength, lElapsedMS);
            this.parent.RaiseOnReportADCSample(this.parent, reportadcsampleEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUKern4Events_ReportUncPresetEvent reportuncpresetEvent = new _DUKern4Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUKern4Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUKern4Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportError(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            _DUKern4Events_ReportErrorEvent reporterrorEvent = new _DUKern4Events_ReportErrorEvent(scError, szError, lUMCBIError, lUMCBIErrMajor, lUMCBIErrMinor, bInstrumentOpen);
            this.parent.RaiseOnReportError(this.parent, reporterrorEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportAMPGainEvent reportampgainEvent = new _DUKern4Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUKern4Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUKern4Events_ReportAMPStatusEvent reportampstatusEvent = new _DUKern4Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUKern4Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportHVStatusEvent reporthvstatusEvent = new _DUKern4Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportSettingsChange(int lSettingsClass) {
            _DUKern4Events_ReportSettingsChangeEvent reportsettingschangeEvent = new _DUKern4Events_ReportSettingsChangeEvent(lSettingsClass);
            this.parent.RaiseOnReportSettingsChange(this.parent, reportsettingschangeEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUKern4Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUKern4Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUKern4Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUKern4Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUKern4Events_ReportInfoEvent reportinfoEvent = new _DUKern4Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUKern4Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUKern4Events_ReportMonitorEvent reportmonitorEvent = new _DUKern4Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUKern4Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUKern4Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUKern4Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUKern4Events_ReportAMPPROEvent reportampproEvent = new _DUKern4Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
        
        public virtual void ReportAlpha(int vacuumState, double vacuumTarget, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            _DUKern4Events_ReportAlphaEvent reportalphaEvent = new _DUKern4Events_ReportAlphaEvent(vacuumState, vacuumTarget, bPulserOn, plrVal, digiOffset, configChan, bRcapOn);
            this.parent.RaiseOnReportAlpha(this.parent, reportalphaEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{f27726fd-0248-4795-9a6c-23a3eb84aa87}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportStabAdjustment")]
    public class AxUKern5 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUKern5 ocx;
        
        private AxUKern5EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUKern5() : 
                base("f27726fd-0248-4795-9a6c-23a3eb84aa87") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual UMCBIKERNELLib.XAMP2 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual UMCBIKERNELLib.XInfo4 IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XHVPS2 IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Locked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Locked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Locked;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual string LockOwner {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockOwner", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LockOwner;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual string Address {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Address;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Address = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IsOpen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOpen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsOpen;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual bool Active {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Active", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Active;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual string Key {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Key;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual int UMCBIHandle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UMCBIHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UMCBIHandle;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual string Password {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Password;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Password = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual string AppDataName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual string AppDataValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual int ErrMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMajor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMajor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual int ErrMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMinor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMinor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual int Error {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Error;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Error = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(37)]
        public virtual bool AutoPasswordRequest {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoPasswordRequest;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoPasswordRequest = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(41)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(42)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(43)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual int DebugLevel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DebugLevel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DebugLevel = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(45)]
        public virtual UMCBIKERNELLib.XAlpha IAlpha {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlpha", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAlpha;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(46)]
        public virtual bool IAlphaValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlphaValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAlphaValid;
            }
        }
        
        public event _DUKern5Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUKern5Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUKern5Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUKern5Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUKern5Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUKern5Events_ReportADCSampleEventHandler ReportADCSample;
        
        public event _DUKern5Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUKern5Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUKern5Events_ReportErrorEventHandler ReportError;
        
        public event _DUKern5Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUKern5Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUKern5Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUKern5Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUKern5Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUKern5Events_ReportSettingsChangeEventHandler ReportSettingsChange;
        
        public event _DUKern5Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUKern5Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUKern5Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUKern5Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUKern5Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUKern5Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUKern5Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUKern5Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUKern5Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public event _DUKern5Events_ReportAlphaEventHandler ReportAlpha;
        
        public event _DUKern5Events_ReportHVSettings2EventHandler ReportHVSettings2;
        
        public event _DUKern5Events_ReportAlphaExEventHandler ReportAlphaEx;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual string Comm(string command) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Comm", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.Comm(command)));
            return returnValue;
        }
        
        public virtual void Open() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Open();
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void Start() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Start", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Start();
        }
        
        public virtual void Stop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Stop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Stop();
        }
        
        public virtual void UnlockInput() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UnlockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UnlockInput();
        }
        
        public virtual void LockInput(string lockOwner) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LockInput(lockOwner);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        public virtual bool get_IsFeature(UMCBIKERNELLib.MIOFEATURES featureNumber) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsFeature", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_IsFeature(featureNumber)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUKern5EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUKern5Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUKern5)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUKern5Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUKern5Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUKern5Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUKern5Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUKern5Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSample(object sender, _DUKern5Events_ReportADCSampleEvent e) {
            if ((this.ReportADCSample != null)) {
                this.ReportADCSample(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUKern5Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUKern5Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportError(object sender, _DUKern5Events_ReportErrorEvent e) {
            if ((this.ReportError != null)) {
                this.ReportError(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUKern5Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUKern5Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUKern5Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUKern5Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUKern5Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportSettingsChange(object sender, _DUKern5Events_ReportSettingsChangeEvent e) {
            if ((this.ReportSettingsChange != null)) {
                this.ReportSettingsChange(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUKern5Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUKern5Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUKern5Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUKern5Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUKern5Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUKern5Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUKern5Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUKern5Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUKern5Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
        
        internal void RaiseOnReportAlpha(object sender, _DUKern5Events_ReportAlphaEvent e) {
            if ((this.ReportAlpha != null)) {
                this.ReportAlpha(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings2(object sender, _DUKern5Events_ReportHVSettings2Event e) {
            if ((this.ReportHVSettings2 != null)) {
                this.ReportHVSettings2(sender, e);
            }
        }
        
        internal void RaiseOnReportAlphaEx(object sender, _DUKern5Events_ReportAlphaExEvent e) {
            if ((this.ReportAlphaEx != null)) {
                this.ReportAlphaEx(sender, e);
            }
        }
    }
    
    public delegate void _DUKern5Events_ReportStabAdjustmentEventHandler(object sender, _DUKern5Events_ReportStabAdjustmentEvent e);
    
    public class _DUKern5Events_ReportStabAdjustmentEvent {
        
        public double dGainAdjustPercent;
        
        public double dZeroAdjustPercent;
        
        public int lGainAdjust;
        
        public int lZeroAdjust;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportStabAdjustmentEvent(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            this.dGainAdjustPercent = dGainAdjustPercent;
            this.dZeroAdjustPercent = dZeroAdjustPercent;
            this.lGainAdjust = lGainAdjust;
            this.lZeroAdjust = lZeroAdjust;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportStabilizerEventHandler(object sender, _DUKern5Events_ReportStabilizerEvent e);
    
    public class _DUKern5Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int lZeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.lZeroWidth = lZeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportADCStatusEventHandler(object sender, _DUKern5Events_ReportADCStatusEvent e);
    
    public class _DUKern5Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportADCSettingsEventHandler(object sender, _DUKern5Events_ReportADCSettingsEvent e);
    
    public class _DUKern5Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportADCDataEventHandler(object sender, _DUKern5Events_ReportADCDataEvent e);
    
    public class _DUKern5Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportADCSampleEventHandler(object sender, _DUKern5Events_ReportADCSampleEvent e);
    
    public class _DUKern5Events_ReportADCSampleEvent {
        
        public int lLength;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportADCSampleEvent(int lLength, int lElapsedMS) {
            this.lLength = lLength;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportUncPresetEventHandler(object sender, _DUKern5Events_ReportUncPresetEvent e);
    
    public class _DUKern5Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportGenPresetsEventHandler(object sender, _DUKern5Events_ReportGenPresetsEvent e);
    
    public class _DUKern5Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportErrorEventHandler(object sender, _DUKern5Events_ReportErrorEvent e);
    
    public class _DUKern5Events_ReportErrorEvent {
        
        public int scError;
        
        public string szError;
        
        public int lUMCBIError;
        
        public int lUMCBIErrMajor;
        
        public int lUMCBIErrMinor;
        
        public int bInstrumentOpen;
        
        public _DUKern5Events_ReportErrorEvent(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            this.scError = scError;
            this.szError = szError;
            this.lUMCBIError = lUMCBIError;
            this.lUMCBIErrMajor = lUMCBIErrMajor;
            this.lUMCBIErrMinor = lUMCBIErrMinor;
            this.bInstrumentOpen = bInstrumentOpen;
        }
    }
    
    public delegate void _DUKern5Events_ReportAMPGainEventHandler(object sender, _DUKern5Events_ReportAMPGainEvent e);
    
    public class _DUKern5Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportAMPSettingsEventHandler(object sender, _DUKern5Events_ReportAMPSettingsEvent e);
    
    public class _DUKern5Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportAMPStatusEventHandler(object sender, _DUKern5Events_ReportAMPStatusEvent e);
    
    public class _DUKern5Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportHVSettingsEventHandler(object sender, _DUKern5Events_ReportHVSettingsEvent e);
    
    public class _DUKern5Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportHVStatusEventHandler(object sender, _DUKern5Events_ReportHVStatusEvent e);
    
    public class _DUKern5Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportSettingsChangeEventHandler(object sender, _DUKern5Events_ReportSettingsChangeEvent e);
    
    public class _DUKern5Events_ReportSettingsChangeEvent {
        
        public int lSettingsClass;
        
        public _DUKern5Events_ReportSettingsChangeEvent(int lSettingsClass) {
            this.lSettingsClass = lSettingsClass;
        }
    }
    
    public delegate void _DUKern5Events_ReportMDAPresetEventHandler(object sender, _DUKern5Events_ReportMDAPresetEvent e);
    
    public class _DUKern5Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUKern5Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUKern5Events_ReportMDACoefficientsEventHandler(object sender, _DUKern5Events_ReportMDACoefficientsEvent e);
    
    public class _DUKern5Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUKern5Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUKern5Events_ReportInfoEventHandler(object sender, _DUKern5Events_ReportInfoEvent e);
    
    public class _DUKern5Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportAMPAdvancedEventHandler(object sender, _DUKern5Events_ReportAMPAdvancedEvent e);
    
    public class _DUKern5Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportMonitorEventHandler(object sender, _DUKern5Events_ReportMonitorEvent e);
    
    public class _DUKern5Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUKern5Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUKern5Events_ReportPowerSettingsEventHandler(object sender, _DUKern5Events_ReportPowerSettingsEvent e);
    
    public class _DUKern5Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportPowerStatusEventHandler(object sender, _DUKern5Events_ReportPowerStatusEvent e);
    
    public class _DUKern5Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportAMPSpecialEventHandler(object sender, _DUKern5Events_ReportAMPSpecialEvent e);
    
    public class _DUKern5Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportAMPPROEventHandler(object sender, _DUKern5Events_ReportAMPPROEvent e);
    
    public class _DUKern5Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportAlphaEventHandler(object sender, _DUKern5Events_ReportAlphaEvent e);
    
    public class _DUKern5Events_ReportAlphaEvent {
        
        public int vacuumState;
        
        public double vacuumTarg;
        
        public double vacuumAct;
        
        public int bPulserOn;
        
        public int plrVal;
        
        public int digiOffset;
        
        public int configChan;
        
        public int bRcapOn;
        
        public _DUKern5Events_ReportAlphaEvent(int vacuumState, double vacuumTarg, double vacuumAct, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            this.vacuumState = vacuumState;
            this.vacuumTarg = vacuumTarg;
            this.vacuumAct = vacuumAct;
            this.bPulserOn = bPulserOn;
            this.plrVal = plrVal;
            this.digiOffset = digiOffset;
            this.configChan = configChan;
            this.bRcapOn = bRcapOn;
        }
    }
    
    public delegate void _DUKern5Events_ReportHVSettings2EventHandler(object sender, _DUKern5Events_ReportHVSettings2Event e);
    
    public class _DUKern5Events_ReportHVSettings2Event {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int lSourceIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportHVSettings2Event(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int lSourceIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.lSourceIndex = lSourceIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern5Events_ReportAlphaExEventHandler(object sender, _DUKern5Events_ReportAlphaExEvent e);
    
    public class _DUKern5Events_ReportAlphaExEvent {
        
        public int lVacuumState;
        
        public int bVacuumStateReadonly;
        
        public double dVacuumTarg;
        
        public double dVacuumAct;
        
        public int bPulserOn;
        
        public int lPulserAmplitude;
        
        public int lDigiOffset;
        
        public int lDisplayChannels;
        
        public int bRcapOn;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern5Events_ReportAlphaExEvent(int lVacuumState, int bVacuumStateReadonly, double dVacuumTarg, double dVacuumAct, int bPulserOn, int lPulserAmplitude, int lDigiOffset, int lDisplayChannels, int bRcapOn, int bReadonly, int lElapsedMS) {
            this.lVacuumState = lVacuumState;
            this.bVacuumStateReadonly = bVacuumStateReadonly;
            this.dVacuumTarg = dVacuumTarg;
            this.dVacuumAct = dVacuumAct;
            this.bPulserOn = bPulserOn;
            this.lPulserAmplitude = lPulserAmplitude;
            this.lDigiOffset = lDigiOffset;
            this.lDisplayChannels = lDisplayChannels;
            this.bRcapOn = bRcapOn;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUKern5EventMulticaster : UMCBIKERNELLib._DUKern5Events {
        
        private AxUKern5 parent;
        
        public AxUKern5EventMulticaster(AxUKern5 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportStabAdjustment(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUKern5Events_ReportStabAdjustmentEvent(dGainAdjustPercent, dZeroAdjustPercent, lGainAdjust, lZeroAdjust, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportStabilizerEvent reportstabilizerEvent = new _DUKern5Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, lZeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUKern5Events_ReportADCStatusEvent reportadcstatusEvent = new _DUKern5Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUKern5Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUKern5Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUKern5Events_ReportADCDataEvent reportadcdataEvent = new _DUKern5Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportADCSample(int lLength, int lElapsedMS) {
            _DUKern5Events_ReportADCSampleEvent reportadcsampleEvent = new _DUKern5Events_ReportADCSampleEvent(lLength, lElapsedMS);
            this.parent.RaiseOnReportADCSample(this.parent, reportadcsampleEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUKern5Events_ReportUncPresetEvent reportuncpresetEvent = new _DUKern5Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUKern5Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUKern5Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportError(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            _DUKern5Events_ReportErrorEvent reporterrorEvent = new _DUKern5Events_ReportErrorEvent(scError, szError, lUMCBIError, lUMCBIErrMajor, lUMCBIErrMinor, bInstrumentOpen);
            this.parent.RaiseOnReportError(this.parent, reporterrorEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportAMPGainEvent reportampgainEvent = new _DUKern5Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUKern5Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUKern5Events_ReportAMPStatusEvent reportampstatusEvent = new _DUKern5Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUKern5Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportHVStatusEvent reporthvstatusEvent = new _DUKern5Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportSettingsChange(int lSettingsClass) {
            _DUKern5Events_ReportSettingsChangeEvent reportsettingschangeEvent = new _DUKern5Events_ReportSettingsChangeEvent(lSettingsClass);
            this.parent.RaiseOnReportSettingsChange(this.parent, reportsettingschangeEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUKern5Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUKern5Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUKern5Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUKern5Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUKern5Events_ReportInfoEvent reportinfoEvent = new _DUKern5Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUKern5Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUKern5Events_ReportMonitorEvent reportmonitorEvent = new _DUKern5Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUKern5Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUKern5Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUKern5Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportAMPPROEvent reportampproEvent = new _DUKern5Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
        
        public virtual void ReportAlpha(int vacuumState, double vacuumTarg, double vacuumAct, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            _DUKern5Events_ReportAlphaEvent reportalphaEvent = new _DUKern5Events_ReportAlphaEvent(vacuumState, vacuumTarg, vacuumAct, bPulserOn, plrVal, digiOffset, configChan, bRcapOn);
            this.parent.RaiseOnReportAlpha(this.parent, reportalphaEvent);
        }
        
        public virtual void ReportHVSettings2(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int lSourceIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportHVSettings2Event reporthvsettings2Event = new _DUKern5Events_ReportHVSettings2Event(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, lSourceIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings2(this.parent, reporthvsettings2Event);
        }
        
        public virtual void ReportAlphaEx(int lVacuumState, int bVacuumStateReadonly, double dVacuumTarg, double dVacuumAct, int bPulserOn, int lPulserAmplitude, int lDigiOffset, int lDisplayChannels, int bRcapOn, int bReadonly, int lElapsedMS) {
            _DUKern5Events_ReportAlphaExEvent reportalphaexEvent = new _DUKern5Events_ReportAlphaExEvent(lVacuumState, bVacuumStateReadonly, dVacuumTarg, dVacuumAct, bPulserOn, lPulserAmplitude, lDigiOffset, lDisplayChannels, bRcapOn, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAlphaEx(this.parent, reportalphaexEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{34fdbbe4-1e50-4b7b-b6d3-64e36244721a}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportStabAdjustment")]
    public class AxUKern6 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUKern6 ocx;
        
        private AxUKern6EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUKern6() : 
                base("34fdbbe4-1e50-4b7b-b6d3-64e36244721a") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual UMCBIKERNELLib.XAMP3 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual UMCBIKERNELLib.XInfo4 IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XHVPS2 IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Locked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Locked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Locked;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual string LockOwner {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockOwner", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LockOwner;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual string Address {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Address;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Address", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Address = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IsOpen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOpen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsOpen;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual bool Active {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Active", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Active;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual string Key {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Key;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual int UMCBIHandle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UMCBIHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UMCBIHandle;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual string Password {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Password;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Password", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Password = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual string AppDataName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual string AppDataValue {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppDataValue;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppDataValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppDataValue = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual int ErrMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMajor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMajor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual int ErrMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ErrMinor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ErrMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ErrMinor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual int Error {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Error;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Error", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Error = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(37)]
        public virtual bool AutoPasswordRequest {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoPasswordRequest;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoPasswordRequest", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoPasswordRequest = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(41)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(42)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(43)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual int DebugLevel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DebugLevel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DebugLevel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DebugLevel = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(45)]
        public virtual UMCBIKERNELLib.XAlpha IAlpha {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlpha", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAlpha;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(46)]
        public virtual bool IAlphaValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlphaValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAlphaValid;
            }
        }
        
        public event _DUKern6Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUKern6Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUKern6Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUKern6Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUKern6Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUKern6Events_ReportADCSampleEventHandler ReportADCSample;
        
        public event _DUKern6Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUKern6Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUKern6Events_ReportErrorEventHandler ReportError;
        
        public event _DUKern6Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUKern6Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUKern6Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUKern6Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUKern6Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUKern6Events_ReportSettingsChangeEventHandler ReportSettingsChange;
        
        public event _DUKern6Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUKern6Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUKern6Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUKern6Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUKern6Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUKern6Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUKern6Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUKern6Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUKern6Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public event _DUKern6Events_ReportAlphaEventHandler ReportAlpha;
        
        public event _DUKern6Events_ReportHVSettings2EventHandler ReportHVSettings2;
        
        public event _DUKern6Events_ReportAlphaExEventHandler ReportAlphaEx;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual string Comm(string command) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Comm", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.Comm(command)));
            return returnValue;
        }
        
        public virtual void Open() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Open();
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void Start() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Start", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Start();
        }
        
        public virtual void Stop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Stop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Stop();
        }
        
        public virtual void UnlockInput() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UnlockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UnlockInput();
        }
        
        public virtual void LockInput(string lockOwner) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LockInput(lockOwner);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        public virtual bool get_IsFeature(UMCBIKERNELLib.MIOFEATURES featureNumber) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_IsFeature", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_IsFeature(featureNumber)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUKern6EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUKern6Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUKern6)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUKern6Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUKern6Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUKern6Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUKern6Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUKern6Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportADCSample(object sender, _DUKern6Events_ReportADCSampleEvent e) {
            if ((this.ReportADCSample != null)) {
                this.ReportADCSample(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUKern6Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUKern6Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportError(object sender, _DUKern6Events_ReportErrorEvent e) {
            if ((this.ReportError != null)) {
                this.ReportError(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUKern6Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUKern6Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUKern6Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUKern6Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUKern6Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportSettingsChange(object sender, _DUKern6Events_ReportSettingsChangeEvent e) {
            if ((this.ReportSettingsChange != null)) {
                this.ReportSettingsChange(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUKern6Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUKern6Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUKern6Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUKern6Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUKern6Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUKern6Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUKern6Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUKern6Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUKern6Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
        
        internal void RaiseOnReportAlpha(object sender, _DUKern6Events_ReportAlphaEvent e) {
            if ((this.ReportAlpha != null)) {
                this.ReportAlpha(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings2(object sender, _DUKern6Events_ReportHVSettings2Event e) {
            if ((this.ReportHVSettings2 != null)) {
                this.ReportHVSettings2(sender, e);
            }
        }
        
        internal void RaiseOnReportAlphaEx(object sender, _DUKern6Events_ReportAlphaExEvent e) {
            if ((this.ReportAlphaEx != null)) {
                this.ReportAlphaEx(sender, e);
            }
        }
    }
    
    public delegate void _DUKern6Events_ReportStabAdjustmentEventHandler(object sender, _DUKern6Events_ReportStabAdjustmentEvent e);
    
    public class _DUKern6Events_ReportStabAdjustmentEvent {
        
        public double dGainAdjustPercent;
        
        public double dZeroAdjustPercent;
        
        public int lGainAdjust;
        
        public int lZeroAdjust;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportStabAdjustmentEvent(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            this.dGainAdjustPercent = dGainAdjustPercent;
            this.dZeroAdjustPercent = dZeroAdjustPercent;
            this.lGainAdjust = lGainAdjust;
            this.lZeroAdjust = lZeroAdjust;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportStabilizerEventHandler(object sender, _DUKern6Events_ReportStabilizerEvent e);
    
    public class _DUKern6Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int lZeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.lZeroWidth = lZeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportADCStatusEventHandler(object sender, _DUKern6Events_ReportADCStatusEvent e);
    
    public class _DUKern6Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportADCSettingsEventHandler(object sender, _DUKern6Events_ReportADCSettingsEvent e);
    
    public class _DUKern6Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportADCDataEventHandler(object sender, _DUKern6Events_ReportADCDataEvent e);
    
    public class _DUKern6Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportADCSampleEventHandler(object sender, _DUKern6Events_ReportADCSampleEvent e);
    
    public class _DUKern6Events_ReportADCSampleEvent {
        
        public int lLength;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportADCSampleEvent(int lLength, int lElapsedMS) {
            this.lLength = lLength;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportUncPresetEventHandler(object sender, _DUKern6Events_ReportUncPresetEvent e);
    
    public class _DUKern6Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportGenPresetsEventHandler(object sender, _DUKern6Events_ReportGenPresetsEvent e);
    
    public class _DUKern6Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportErrorEventHandler(object sender, _DUKern6Events_ReportErrorEvent e);
    
    public class _DUKern6Events_ReportErrorEvent {
        
        public int scError;
        
        public string szError;
        
        public int lUMCBIError;
        
        public int lUMCBIErrMajor;
        
        public int lUMCBIErrMinor;
        
        public int bInstrumentOpen;
        
        public _DUKern6Events_ReportErrorEvent(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            this.scError = scError;
            this.szError = szError;
            this.lUMCBIError = lUMCBIError;
            this.lUMCBIErrMajor = lUMCBIErrMajor;
            this.lUMCBIErrMinor = lUMCBIErrMinor;
            this.bInstrumentOpen = bInstrumentOpen;
        }
    }
    
    public delegate void _DUKern6Events_ReportAMPGainEventHandler(object sender, _DUKern6Events_ReportAMPGainEvent e);
    
    public class _DUKern6Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportAMPSettingsEventHandler(object sender, _DUKern6Events_ReportAMPSettingsEvent e);
    
    public class _DUKern6Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportAMPStatusEventHandler(object sender, _DUKern6Events_ReportAMPStatusEvent e);
    
    public class _DUKern6Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportHVSettingsEventHandler(object sender, _DUKern6Events_ReportHVSettingsEvent e);
    
    public class _DUKern6Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportHVStatusEventHandler(object sender, _DUKern6Events_ReportHVStatusEvent e);
    
    public class _DUKern6Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportSettingsChangeEventHandler(object sender, _DUKern6Events_ReportSettingsChangeEvent e);
    
    public class _DUKern6Events_ReportSettingsChangeEvent {
        
        public int lSettingsClass;
        
        public _DUKern6Events_ReportSettingsChangeEvent(int lSettingsClass) {
            this.lSettingsClass = lSettingsClass;
        }
    }
    
    public delegate void _DUKern6Events_ReportMDAPresetEventHandler(object sender, _DUKern6Events_ReportMDAPresetEvent e);
    
    public class _DUKern6Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUKern6Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUKern6Events_ReportMDACoefficientsEventHandler(object sender, _DUKern6Events_ReportMDACoefficientsEvent e);
    
    public class _DUKern6Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUKern6Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUKern6Events_ReportInfoEventHandler(object sender, _DUKern6Events_ReportInfoEvent e);
    
    public class _DUKern6Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportAMPAdvancedEventHandler(object sender, _DUKern6Events_ReportAMPAdvancedEvent e);
    
    public class _DUKern6Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportMonitorEventHandler(object sender, _DUKern6Events_ReportMonitorEvent e);
    
    public class _DUKern6Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUKern6Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUKern6Events_ReportPowerSettingsEventHandler(object sender, _DUKern6Events_ReportPowerSettingsEvent e);
    
    public class _DUKern6Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportPowerStatusEventHandler(object sender, _DUKern6Events_ReportPowerStatusEvent e);
    
    public class _DUKern6Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportAMPSpecialEventHandler(object sender, _DUKern6Events_ReportAMPSpecialEvent e);
    
    public class _DUKern6Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportAMPPROEventHandler(object sender, _DUKern6Events_ReportAMPPROEvent e);
    
    public class _DUKern6Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportAlphaEventHandler(object sender, _DUKern6Events_ReportAlphaEvent e);
    
    public class _DUKern6Events_ReportAlphaEvent {
        
        public int vacuumState;
        
        public double vacuumTarg;
        
        public double vacuumAct;
        
        public int bPulserOn;
        
        public int plrVal;
        
        public int digiOffset;
        
        public int configChan;
        
        public int bRcapOn;
        
        public _DUKern6Events_ReportAlphaEvent(int vacuumState, double vacuumTarg, double vacuumAct, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            this.vacuumState = vacuumState;
            this.vacuumTarg = vacuumTarg;
            this.vacuumAct = vacuumAct;
            this.bPulserOn = bPulserOn;
            this.plrVal = plrVal;
            this.digiOffset = digiOffset;
            this.configChan = configChan;
            this.bRcapOn = bRcapOn;
        }
    }
    
    public delegate void _DUKern6Events_ReportHVSettings2EventHandler(object sender, _DUKern6Events_ReportHVSettings2Event e);
    
    public class _DUKern6Events_ReportHVSettings2Event {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int lSourceIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportHVSettings2Event(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int lSourceIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.lSourceIndex = lSourceIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUKern6Events_ReportAlphaExEventHandler(object sender, _DUKern6Events_ReportAlphaExEvent e);
    
    public class _DUKern6Events_ReportAlphaExEvent {
        
        public int lVacuumState;
        
        public int bVacuumStateReadonly;
        
        public double dVacuumTarg;
        
        public double dVacuumAct;
        
        public int bPulserOn;
        
        public int lPulserAmplitude;
        
        public int lDigiOffset;
        
        public int lDisplayChannels;
        
        public int bRcapOn;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUKern6Events_ReportAlphaExEvent(int lVacuumState, int bVacuumStateReadonly, double dVacuumTarg, double dVacuumAct, int bPulserOn, int lPulserAmplitude, int lDigiOffset, int lDisplayChannels, int bRcapOn, int bReadonly, int lElapsedMS) {
            this.lVacuumState = lVacuumState;
            this.bVacuumStateReadonly = bVacuumStateReadonly;
            this.dVacuumTarg = dVacuumTarg;
            this.dVacuumAct = dVacuumAct;
            this.bPulserOn = bPulserOn;
            this.lPulserAmplitude = lPulserAmplitude;
            this.lDigiOffset = lDigiOffset;
            this.lDisplayChannels = lDisplayChannels;
            this.bRcapOn = bRcapOn;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUKern6EventMulticaster : UMCBIKERNELLib._DUKern6Events {
        
        private AxUKern6 parent;
        
        public AxUKern6EventMulticaster(AxUKern6 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportStabAdjustment(double dGainAdjustPercent, double dZeroAdjustPercent, int lGainAdjust, int lZeroAdjust, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUKern6Events_ReportStabAdjustmentEvent(dGainAdjustPercent, dZeroAdjustPercent, lGainAdjust, lZeroAdjust, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int lZeroWidth, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportStabilizerEvent reportstabilizerEvent = new _DUKern6Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, lZeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUKern6Events_ReportADCStatusEvent reportadcstatusEvent = new _DUKern6Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUKern6Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUKern6Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUKern6Events_ReportADCDataEvent reportadcdataEvent = new _DUKern6Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportADCSample(int lLength, int lElapsedMS) {
            _DUKern6Events_ReportADCSampleEvent reportadcsampleEvent = new _DUKern6Events_ReportADCSampleEvent(lLength, lElapsedMS);
            this.parent.RaiseOnReportADCSample(this.parent, reportadcsampleEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUKern6Events_ReportUncPresetEvent reportuncpresetEvent = new _DUKern6Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUKern6Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUKern6Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportError(int scError, string szError, int lUMCBIError, int lUMCBIErrMajor, int lUMCBIErrMinor, int bInstrumentOpen) {
            _DUKern6Events_ReportErrorEvent reporterrorEvent = new _DUKern6Events_ReportErrorEvent(scError, szError, lUMCBIError, lUMCBIErrMajor, lUMCBIErrMinor, bInstrumentOpen);
            this.parent.RaiseOnReportError(this.parent, reporterrorEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportAMPGainEvent reportampgainEvent = new _DUKern6Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUKern6Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUKern6Events_ReportAMPStatusEvent reportampstatusEvent = new _DUKern6Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUKern6Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportHVStatusEvent reporthvstatusEvent = new _DUKern6Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportSettingsChange(int lSettingsClass) {
            _DUKern6Events_ReportSettingsChangeEvent reportsettingschangeEvent = new _DUKern6Events_ReportSettingsChangeEvent(lSettingsClass);
            this.parent.RaiseOnReportSettingsChange(this.parent, reportsettingschangeEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUKern6Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUKern6Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUKern6Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUKern6Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUKern6Events_ReportInfoEvent reportinfoEvent = new _DUKern6Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUKern6Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUKern6Events_ReportMonitorEvent reportmonitorEvent = new _DUKern6Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUKern6Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUKern6Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUKern6Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportAMPPROEvent reportampproEvent = new _DUKern6Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
        
        public virtual void ReportAlpha(int vacuumState, double vacuumTarg, double vacuumAct, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            _DUKern6Events_ReportAlphaEvent reportalphaEvent = new _DUKern6Events_ReportAlphaEvent(vacuumState, vacuumTarg, vacuumAct, bPulserOn, plrVal, digiOffset, configChan, bRcapOn);
            this.parent.RaiseOnReportAlpha(this.parent, reportalphaEvent);
        }
        
        public virtual void ReportHVSettings2(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int lSourceIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportHVSettings2Event reporthvsettings2Event = new _DUKern6Events_ReportHVSettings2Event(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, lSourceIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings2(this.parent, reporthvsettings2Event);
        }
        
        public virtual void ReportAlphaEx(int lVacuumState, int bVacuumStateReadonly, double dVacuumTarg, double dVacuumAct, int bPulserOn, int lPulserAmplitude, int lDigiOffset, int lDisplayChannels, int bRcapOn, int bReadonly, int lElapsedMS) {
            _DUKern6Events_ReportAlphaExEvent reportalphaexEvent = new _DUKern6Events_ReportAlphaExEvent(lVacuumState, bVacuumStateReadonly, dVacuumTarg, dVacuumAct, bPulserOn, lPulserAmplitude, lDigiOffset, lDisplayChannels, bRcapOn, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAlphaEx(this.parent, reportalphaexEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{e7eac267-81fd-4e7f-8b4c-c347ff2a8d67}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportADCSettings")]
    public class AxUBuffer2 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUBuffer2 ocx;
        
        private AxUBuffer2EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUBuffer2() : 
                base("e7eac267-81fd-4e7f-8b4c-c347ff2a8d67") {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XAMP2 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XInfo IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual UMCBIKERNELLib.XHVPS IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Loaded {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Loaded", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Loaded;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual object HardRecs {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecs", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        public event _DUBuffer2Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUBuffer2Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUBuffer2Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUBuffer2Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUBuffer2Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUBuffer2Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUBuffer2Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUBuffer2Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUBuffer2Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUBuffer2Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUBuffer2Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUBuffer2Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUBuffer2Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUBuffer2Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUBuffer2Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUBuffer2Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUBuffer2Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUBuffer2Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUBuffer2Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUBuffer2Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUBuffer2Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual void LoadFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadFile(szFilePath);
        }
        
        public virtual void Load(object piuObject) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Load", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Load(piuObject);
        }
        
        public virtual void SaveSPCFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveSPCFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveSPCFile(szFilePath);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUBuffer2EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUBuffer2Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUBuffer2)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUBuffer2Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUBuffer2Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUBuffer2Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUBuffer2Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUBuffer2Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUBuffer2Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUBuffer2Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUBuffer2Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUBuffer2Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUBuffer2Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUBuffer2Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUBuffer2Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUBuffer2Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUBuffer2Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUBuffer2Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUBuffer2Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUBuffer2Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUBuffer2Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUBuffer2Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUBuffer2Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUBuffer2Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
    }
    
    public delegate void _DUBuffer2Events_ReportADCSettingsEventHandler(object sender, _DUBuffer2Events_ReportADCSettingsEvent e);
    
    public class _DUBuffer2Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportADCStatusEventHandler(object sender, _DUBuffer2Events_ReportADCStatusEvent e);
    
    public class _DUBuffer2Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportStabilizerEventHandler(object sender, _DUBuffer2Events_ReportStabilizerEvent e);
    
    public class _DUBuffer2Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int zeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.zeroWidth = zeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportStabAdjustmentEventHandler(object sender, _DUBuffer2Events_ReportStabAdjustmentEvent e);
    
    public class _DUBuffer2Events_ReportStabAdjustmentEvent {
        
        public double dGainPct;
        
        public double dZeroPct;
        
        public int lGainAdj;
        
        public int lZeroAdj;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportStabAdjustmentEvent(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            this.dGainPct = dGainPct;
            this.dZeroPct = dZeroPct;
            this.lGainAdj = lGainAdj;
            this.lZeroAdj = lZeroAdj;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportGenPresetsEventHandler(object sender, _DUBuffer2Events_ReportGenPresetsEvent e);
    
    public class _DUBuffer2Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportUncPresetEventHandler(object sender, _DUBuffer2Events_ReportUncPresetEvent e);
    
    public class _DUBuffer2Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportAMPGainEventHandler(object sender, _DUBuffer2Events_ReportAMPGainEvent e);
    
    public class _DUBuffer2Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportAMPSettingsEventHandler(object sender, _DUBuffer2Events_ReportAMPSettingsEvent e);
    
    public class _DUBuffer2Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportAMPStatusEventHandler(object sender, _DUBuffer2Events_ReportAMPStatusEvent e);
    
    public class _DUBuffer2Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportHVSettingsEventHandler(object sender, _DUBuffer2Events_ReportHVSettingsEvent e);
    
    public class _DUBuffer2Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportHVStatusEventHandler(object sender, _DUBuffer2Events_ReportHVStatusEvent e);
    
    public class _DUBuffer2Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportMDAPresetEventHandler(object sender, _DUBuffer2Events_ReportMDAPresetEvent e);
    
    public class _DUBuffer2Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUBuffer2Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportMDACoefficientsEventHandler(object sender, _DUBuffer2Events_ReportMDACoefficientsEvent e);
    
    public class _DUBuffer2Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUBuffer2Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportInfoEventHandler(object sender, _DUBuffer2Events_ReportInfoEvent e);
    
    public class _DUBuffer2Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportAMPAdvancedEventHandler(object sender, _DUBuffer2Events_ReportAMPAdvancedEvent e);
    
    public class _DUBuffer2Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportADCDataEventHandler(object sender, _DUBuffer2Events_ReportADCDataEvent e);
    
    public class _DUBuffer2Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportMonitorEventHandler(object sender, _DUBuffer2Events_ReportMonitorEvent e);
    
    public class _DUBuffer2Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUBuffer2Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportPowerSettingsEventHandler(object sender, _DUBuffer2Events_ReportPowerSettingsEvent e);
    
    public class _DUBuffer2Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportPowerStatusEventHandler(object sender, _DUBuffer2Events_ReportPowerStatusEvent e);
    
    public class _DUBuffer2Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportAMPSpecialEventHandler(object sender, _DUBuffer2Events_ReportAMPSpecialEvent e);
    
    public class _DUBuffer2Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer2Events_ReportAMPPROEventHandler(object sender, _DUBuffer2Events_ReportAMPPROEvent e);
    
    public class _DUBuffer2Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer2Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUBuffer2EventMulticaster : UMCBIKERNELLib._DUBuffer2Events {
        
        private AxUBuffer2 parent;
        
        public AxUBuffer2EventMulticaster(AxUBuffer2 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUBuffer2Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUBuffer2Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUBuffer2Events_ReportADCStatusEvent reportadcstatusEvent = new _DUBuffer2Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportStabilizerEvent reportstabilizerEvent = new _DUBuffer2Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, zeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportStabAdjustment(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUBuffer2Events_ReportStabAdjustmentEvent(dGainPct, dZeroPct, lGainAdj, lZeroAdj, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUBuffer2Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUBuffer2Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUBuffer2Events_ReportUncPresetEvent reportuncpresetEvent = new _DUBuffer2Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportAMPGainEvent reportampgainEvent = new _DUBuffer2Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUBuffer2Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportAMPStatusEvent reportampstatusEvent = new _DUBuffer2Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUBuffer2Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportHVStatusEvent reporthvstatusEvent = new _DUBuffer2Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUBuffer2Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUBuffer2Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUBuffer2Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUBuffer2Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUBuffer2Events_ReportInfoEvent reportinfoEvent = new _DUBuffer2Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUBuffer2Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUBuffer2Events_ReportADCDataEvent reportadcdataEvent = new _DUBuffer2Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUBuffer2Events_ReportMonitorEvent reportmonitorEvent = new _DUBuffer2Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUBuffer2Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUBuffer2Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUBuffer2Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUBuffer2Events_ReportAMPPROEvent reportampproEvent = new _DUBuffer2Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{4633dccb-b1d9-44c0-a1d8-fca9aabbc239}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportADCSettings")]
    public class AxUBuffer3 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUBuffer3 ocx;
        
        private AxUBuffer3EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUBuffer3() : 
                base("4633dccb-b1d9-44c0-a1d8-fca9aabbc239") {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IADCValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XAMP2 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAMPValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IStabilizerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XInfo IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IInfoValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual UMCBIKERNELLib.XHVPS IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IHVPSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDataValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IMCSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPresetsValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IFieldValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Loaded {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Loaded", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Loaded;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Readonly = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAsynchValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual object HardRecs {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecs", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPropertiesValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPowerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDisplayValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        public event _DUBuffer3Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUBuffer3Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUBuffer3Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUBuffer3Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUBuffer3Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUBuffer3Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUBuffer3Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUBuffer3Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUBuffer3Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUBuffer3Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUBuffer3Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUBuffer3Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUBuffer3Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUBuffer3Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUBuffer3Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUBuffer3Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUBuffer3Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUBuffer3Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUBuffer3Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUBuffer3Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUBuffer3Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual void LoadFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadFile(szFilePath);
        }
        
        public virtual void SaveCHNFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveCHNFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveCHNFile(szFilePath);
        }
        
        public virtual void SaveSPCFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveSPCFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveSPCFile(szFilePath);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUBuffer3EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUBuffer3Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUBuffer3)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUBuffer3Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUBuffer3Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUBuffer3Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUBuffer3Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUBuffer3Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUBuffer3Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUBuffer3Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUBuffer3Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUBuffer3Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUBuffer3Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUBuffer3Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUBuffer3Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUBuffer3Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUBuffer3Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUBuffer3Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUBuffer3Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUBuffer3Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUBuffer3Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUBuffer3Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUBuffer3Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUBuffer3Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
    }
    
    public delegate void _DUBuffer3Events_ReportADCSettingsEventHandler(object sender, _DUBuffer3Events_ReportADCSettingsEvent e);
    
    public class _DUBuffer3Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportADCStatusEventHandler(object sender, _DUBuffer3Events_ReportADCStatusEvent e);
    
    public class _DUBuffer3Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportStabilizerEventHandler(object sender, _DUBuffer3Events_ReportStabilizerEvent e);
    
    public class _DUBuffer3Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int zeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.zeroWidth = zeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportStabAdjustmentEventHandler(object sender, _DUBuffer3Events_ReportStabAdjustmentEvent e);
    
    public class _DUBuffer3Events_ReportStabAdjustmentEvent {
        
        public double dGainPct;
        
        public double dZeroPct;
        
        public int lGainAdj;
        
        public int lZeroAdj;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportStabAdjustmentEvent(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            this.dGainPct = dGainPct;
            this.dZeroPct = dZeroPct;
            this.lGainAdj = lGainAdj;
            this.lZeroAdj = lZeroAdj;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportGenPresetsEventHandler(object sender, _DUBuffer3Events_ReportGenPresetsEvent e);
    
    public class _DUBuffer3Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportUncPresetEventHandler(object sender, _DUBuffer3Events_ReportUncPresetEvent e);
    
    public class _DUBuffer3Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportAMPGainEventHandler(object sender, _DUBuffer3Events_ReportAMPGainEvent e);
    
    public class _DUBuffer3Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportAMPSettingsEventHandler(object sender, _DUBuffer3Events_ReportAMPSettingsEvent e);
    
    public class _DUBuffer3Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportAMPStatusEventHandler(object sender, _DUBuffer3Events_ReportAMPStatusEvent e);
    
    public class _DUBuffer3Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportHVSettingsEventHandler(object sender, _DUBuffer3Events_ReportHVSettingsEvent e);
    
    public class _DUBuffer3Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportHVStatusEventHandler(object sender, _DUBuffer3Events_ReportHVStatusEvent e);
    
    public class _DUBuffer3Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportMDAPresetEventHandler(object sender, _DUBuffer3Events_ReportMDAPresetEvent e);
    
    public class _DUBuffer3Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUBuffer3Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportMDACoefficientsEventHandler(object sender, _DUBuffer3Events_ReportMDACoefficientsEvent e);
    
    public class _DUBuffer3Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUBuffer3Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportInfoEventHandler(object sender, _DUBuffer3Events_ReportInfoEvent e);
    
    public class _DUBuffer3Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportAMPAdvancedEventHandler(object sender, _DUBuffer3Events_ReportAMPAdvancedEvent e);
    
    public class _DUBuffer3Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportADCDataEventHandler(object sender, _DUBuffer3Events_ReportADCDataEvent e);
    
    public class _DUBuffer3Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportMonitorEventHandler(object sender, _DUBuffer3Events_ReportMonitorEvent e);
    
    public class _DUBuffer3Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUBuffer3Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportPowerSettingsEventHandler(object sender, _DUBuffer3Events_ReportPowerSettingsEvent e);
    
    public class _DUBuffer3Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportPowerStatusEventHandler(object sender, _DUBuffer3Events_ReportPowerStatusEvent e);
    
    public class _DUBuffer3Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportAMPSpecialEventHandler(object sender, _DUBuffer3Events_ReportAMPSpecialEvent e);
    
    public class _DUBuffer3Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer3Events_ReportAMPPROEventHandler(object sender, _DUBuffer3Events_ReportAMPPROEvent e);
    
    public class _DUBuffer3Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer3Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUBuffer3EventMulticaster : UMCBIKERNELLib._DUBuffer3Events {
        
        private AxUBuffer3 parent;
        
        public AxUBuffer3EventMulticaster(AxUBuffer3 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUBuffer3Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUBuffer3Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUBuffer3Events_ReportADCStatusEvent reportadcstatusEvent = new _DUBuffer3Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportStabilizerEvent reportstabilizerEvent = new _DUBuffer3Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, zeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportStabAdjustment(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUBuffer3Events_ReportStabAdjustmentEvent(dGainPct, dZeroPct, lGainAdj, lZeroAdj, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUBuffer3Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUBuffer3Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUBuffer3Events_ReportUncPresetEvent reportuncpresetEvent = new _DUBuffer3Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportAMPGainEvent reportampgainEvent = new _DUBuffer3Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUBuffer3Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportAMPStatusEvent reportampstatusEvent = new _DUBuffer3Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUBuffer3Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportHVStatusEvent reporthvstatusEvent = new _DUBuffer3Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUBuffer3Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUBuffer3Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUBuffer3Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUBuffer3Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUBuffer3Events_ReportInfoEvent reportinfoEvent = new _DUBuffer3Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUBuffer3Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUBuffer3Events_ReportADCDataEvent reportadcdataEvent = new _DUBuffer3Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUBuffer3Events_ReportMonitorEvent reportmonitorEvent = new _DUBuffer3Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUBuffer3Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUBuffer3Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUBuffer3Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUBuffer3Events_ReportAMPPROEvent reportampproEvent = new _DUBuffer3Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{c01abcda-dff1-4633-bebe-d9211de852f5}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportADCSettings")]
    public class AxUBuffer4 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUBuffer4 ocx;
        
        private AxUBuffer4EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUBuffer4() : 
                base("c01abcda-dff1-4633-bebe-d9211de852f5") {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IADCValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XAMP2 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAMPValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IStabilizerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XInfo2 IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IInfoValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual UMCBIKERNELLib.XHVPS IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IHVPSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDataValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IMCSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPresetsValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IFieldValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Loaded {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Loaded", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Loaded;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Readonly = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAsynchValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual object HardRecs {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecs", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPropertiesValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPowerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDisplayValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        public event _DUBuffer4Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUBuffer4Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUBuffer4Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUBuffer4Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUBuffer4Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUBuffer4Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUBuffer4Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUBuffer4Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUBuffer4Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUBuffer4Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUBuffer4Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUBuffer4Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUBuffer4Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUBuffer4Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUBuffer4Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUBuffer4Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUBuffer4Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUBuffer4Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUBuffer4Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUBuffer4Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUBuffer4Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public event _DUBuffer4Events_ReportAppReportEventHandler ReportAppReport;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual void LoadFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadFile(szFilePath);
        }
        
        public virtual void SaveCHNFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveCHNFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveCHNFile(szFilePath);
        }
        
        public virtual void SaveSPCFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveSPCFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveSPCFile(szFilePath);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUBuffer4EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUBuffer4Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUBuffer4)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUBuffer4Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUBuffer4Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUBuffer4Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUBuffer4Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUBuffer4Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUBuffer4Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUBuffer4Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUBuffer4Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUBuffer4Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUBuffer4Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUBuffer4Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUBuffer4Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUBuffer4Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUBuffer4Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUBuffer4Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUBuffer4Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUBuffer4Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUBuffer4Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUBuffer4Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUBuffer4Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUBuffer4Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
        
        internal void RaiseOnReportAppReport(object sender, _DUBuffer4Events_ReportAppReportEvent e) {
            if ((this.ReportAppReport != null)) {
                this.ReportAppReport(sender, e);
            }
        }
    }
    
    public delegate void _DUBuffer4Events_ReportADCSettingsEventHandler(object sender, _DUBuffer4Events_ReportADCSettingsEvent e);
    
    public class _DUBuffer4Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportADCStatusEventHandler(object sender, _DUBuffer4Events_ReportADCStatusEvent e);
    
    public class _DUBuffer4Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportStabilizerEventHandler(object sender, _DUBuffer4Events_ReportStabilizerEvent e);
    
    public class _DUBuffer4Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int zeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.zeroWidth = zeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportStabAdjustmentEventHandler(object sender, _DUBuffer4Events_ReportStabAdjustmentEvent e);
    
    public class _DUBuffer4Events_ReportStabAdjustmentEvent {
        
        public double dGainPct;
        
        public double dZeroPct;
        
        public int lGainAdj;
        
        public int lZeroAdj;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportStabAdjustmentEvent(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            this.dGainPct = dGainPct;
            this.dZeroPct = dZeroPct;
            this.lGainAdj = lGainAdj;
            this.lZeroAdj = lZeroAdj;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportGenPresetsEventHandler(object sender, _DUBuffer4Events_ReportGenPresetsEvent e);
    
    public class _DUBuffer4Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportUncPresetEventHandler(object sender, _DUBuffer4Events_ReportUncPresetEvent e);
    
    public class _DUBuffer4Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportAMPGainEventHandler(object sender, _DUBuffer4Events_ReportAMPGainEvent e);
    
    public class _DUBuffer4Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportAMPSettingsEventHandler(object sender, _DUBuffer4Events_ReportAMPSettingsEvent e);
    
    public class _DUBuffer4Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportAMPStatusEventHandler(object sender, _DUBuffer4Events_ReportAMPStatusEvent e);
    
    public class _DUBuffer4Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportHVSettingsEventHandler(object sender, _DUBuffer4Events_ReportHVSettingsEvent e);
    
    public class _DUBuffer4Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportHVStatusEventHandler(object sender, _DUBuffer4Events_ReportHVStatusEvent e);
    
    public class _DUBuffer4Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportMDAPresetEventHandler(object sender, _DUBuffer4Events_ReportMDAPresetEvent e);
    
    public class _DUBuffer4Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUBuffer4Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportMDACoefficientsEventHandler(object sender, _DUBuffer4Events_ReportMDACoefficientsEvent e);
    
    public class _DUBuffer4Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUBuffer4Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportInfoEventHandler(object sender, _DUBuffer4Events_ReportInfoEvent e);
    
    public class _DUBuffer4Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportAMPAdvancedEventHandler(object sender, _DUBuffer4Events_ReportAMPAdvancedEvent e);
    
    public class _DUBuffer4Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportADCDataEventHandler(object sender, _DUBuffer4Events_ReportADCDataEvent e);
    
    public class _DUBuffer4Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportMonitorEventHandler(object sender, _DUBuffer4Events_ReportMonitorEvent e);
    
    public class _DUBuffer4Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUBuffer4Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportPowerSettingsEventHandler(object sender, _DUBuffer4Events_ReportPowerSettingsEvent e);
    
    public class _DUBuffer4Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportPowerStatusEventHandler(object sender, _DUBuffer4Events_ReportPowerStatusEvent e);
    
    public class _DUBuffer4Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportAMPSpecialEventHandler(object sender, _DUBuffer4Events_ReportAMPSpecialEvent e);
    
    public class _DUBuffer4Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportAMPPROEventHandler(object sender, _DUBuffer4Events_ReportAMPPROEvent e);
    
    public class _DUBuffer4Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer4Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer4Events_ReportAppReportEventHandler(object sender, _DUBuffer4Events_ReportAppReportEvent e);
    
    public class _DUBuffer4Events_ReportAppReportEvent {
        
        public int lReportID;
        
        public string szReport;
        
        public _DUBuffer4Events_ReportAppReportEvent(int lReportID, string szReport) {
            this.lReportID = lReportID;
            this.szReport = szReport;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUBuffer4EventMulticaster : UMCBIKERNELLib._DUBuffer4Events {
        
        private AxUBuffer4 parent;
        
        public AxUBuffer4EventMulticaster(AxUBuffer4 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUBuffer4Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUBuffer4Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUBuffer4Events_ReportADCStatusEvent reportadcstatusEvent = new _DUBuffer4Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportStabilizerEvent reportstabilizerEvent = new _DUBuffer4Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, zeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportStabAdjustment(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUBuffer4Events_ReportStabAdjustmentEvent(dGainPct, dZeroPct, lGainAdj, lZeroAdj, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUBuffer4Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUBuffer4Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUBuffer4Events_ReportUncPresetEvent reportuncpresetEvent = new _DUBuffer4Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportAMPGainEvent reportampgainEvent = new _DUBuffer4Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUBuffer4Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportAMPStatusEvent reportampstatusEvent = new _DUBuffer4Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUBuffer4Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportHVStatusEvent reporthvstatusEvent = new _DUBuffer4Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUBuffer4Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUBuffer4Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUBuffer4Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUBuffer4Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUBuffer4Events_ReportInfoEvent reportinfoEvent = new _DUBuffer4Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUBuffer4Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUBuffer4Events_ReportADCDataEvent reportadcdataEvent = new _DUBuffer4Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUBuffer4Events_ReportMonitorEvent reportmonitorEvent = new _DUBuffer4Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUBuffer4Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUBuffer4Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUBuffer4Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUBuffer4Events_ReportAMPPROEvent reportampproEvent = new _DUBuffer4Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
        
        public virtual void ReportAppReport(int lReportID, string szReport) {
            _DUBuffer4Events_ReportAppReportEvent reportappreportEvent = new _DUBuffer4Events_ReportAppReportEvent(lReportID, szReport);
            this.parent.RaiseOnReportAppReport(this.parent, reportappreportEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{8c407d18-a7a3-4396-a5be-1e9b336a2986}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportADCSettings")]
    public class AxUBuffer5 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUBuffer5 ocx;
        
        private AxUBuffer5EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUBuffer5() : 
                base("8c407d18-a7a3-4396-a5be-1e9b336a2986") {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IADCValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XAMP2 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAMPValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IStabilizerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XInfo3 IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IInfoValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual UMCBIKERNELLib.XHVPS IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IHVPSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDataValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IMCSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPresetsValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IFieldValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Loaded {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Loaded", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Loaded;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Readonly = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAsynchValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual object HardRecs {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecs", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPropertiesValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPowerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDisplayValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual bool HardRecsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HardRecsValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual bool AppReportsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReportsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppReportsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReportsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppReportsValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual object AppReports {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReports", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppReports;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReports", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppReports = value;
            }
        }
        
        public event _DUBuffer5Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUBuffer5Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUBuffer5Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUBuffer5Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUBuffer5Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUBuffer5Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUBuffer5Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUBuffer5Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUBuffer5Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUBuffer5Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUBuffer5Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUBuffer5Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUBuffer5Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUBuffer5Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUBuffer5Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUBuffer5Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUBuffer5Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUBuffer5Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUBuffer5Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUBuffer5Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUBuffer5Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual void LoadFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadFile(szFilePath);
        }
        
        public virtual void SaveCHNFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveCHNFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveCHNFile(szFilePath);
        }
        
        public virtual void SaveSPCFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveSPCFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveSPCFile(szFilePath);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUBuffer5EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUBuffer5Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUBuffer5)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUBuffer5Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUBuffer5Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUBuffer5Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUBuffer5Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUBuffer5Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUBuffer5Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUBuffer5Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUBuffer5Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUBuffer5Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUBuffer5Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUBuffer5Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUBuffer5Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUBuffer5Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUBuffer5Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUBuffer5Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUBuffer5Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUBuffer5Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUBuffer5Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUBuffer5Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUBuffer5Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUBuffer5Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
    }
    
    public delegate void _DUBuffer5Events_ReportADCSettingsEventHandler(object sender, _DUBuffer5Events_ReportADCSettingsEvent e);
    
    public class _DUBuffer5Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportADCStatusEventHandler(object sender, _DUBuffer5Events_ReportADCStatusEvent e);
    
    public class _DUBuffer5Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportStabilizerEventHandler(object sender, _DUBuffer5Events_ReportStabilizerEvent e);
    
    public class _DUBuffer5Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int zeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.zeroWidth = zeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportStabAdjustmentEventHandler(object sender, _DUBuffer5Events_ReportStabAdjustmentEvent e);
    
    public class _DUBuffer5Events_ReportStabAdjustmentEvent {
        
        public double dGainPct;
        
        public double dZeroPct;
        
        public int lGainAdj;
        
        public int lZeroAdj;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportStabAdjustmentEvent(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            this.dGainPct = dGainPct;
            this.dZeroPct = dZeroPct;
            this.lGainAdj = lGainAdj;
            this.lZeroAdj = lZeroAdj;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportGenPresetsEventHandler(object sender, _DUBuffer5Events_ReportGenPresetsEvent e);
    
    public class _DUBuffer5Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportUncPresetEventHandler(object sender, _DUBuffer5Events_ReportUncPresetEvent e);
    
    public class _DUBuffer5Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportAMPGainEventHandler(object sender, _DUBuffer5Events_ReportAMPGainEvent e);
    
    public class _DUBuffer5Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportAMPSettingsEventHandler(object sender, _DUBuffer5Events_ReportAMPSettingsEvent e);
    
    public class _DUBuffer5Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportAMPStatusEventHandler(object sender, _DUBuffer5Events_ReportAMPStatusEvent e);
    
    public class _DUBuffer5Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportHVSettingsEventHandler(object sender, _DUBuffer5Events_ReportHVSettingsEvent e);
    
    public class _DUBuffer5Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportHVStatusEventHandler(object sender, _DUBuffer5Events_ReportHVStatusEvent e);
    
    public class _DUBuffer5Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportMDAPresetEventHandler(object sender, _DUBuffer5Events_ReportMDAPresetEvent e);
    
    public class _DUBuffer5Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUBuffer5Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportMDACoefficientsEventHandler(object sender, _DUBuffer5Events_ReportMDACoefficientsEvent e);
    
    public class _DUBuffer5Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUBuffer5Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportInfoEventHandler(object sender, _DUBuffer5Events_ReportInfoEvent e);
    
    public class _DUBuffer5Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportAMPAdvancedEventHandler(object sender, _DUBuffer5Events_ReportAMPAdvancedEvent e);
    
    public class _DUBuffer5Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportADCDataEventHandler(object sender, _DUBuffer5Events_ReportADCDataEvent e);
    
    public class _DUBuffer5Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportMonitorEventHandler(object sender, _DUBuffer5Events_ReportMonitorEvent e);
    
    public class _DUBuffer5Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUBuffer5Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportPowerSettingsEventHandler(object sender, _DUBuffer5Events_ReportPowerSettingsEvent e);
    
    public class _DUBuffer5Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportPowerStatusEventHandler(object sender, _DUBuffer5Events_ReportPowerStatusEvent e);
    
    public class _DUBuffer5Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportAMPSpecialEventHandler(object sender, _DUBuffer5Events_ReportAMPSpecialEvent e);
    
    public class _DUBuffer5Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer5Events_ReportAMPPROEventHandler(object sender, _DUBuffer5Events_ReportAMPPROEvent e);
    
    public class _DUBuffer5Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer5Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUBuffer5EventMulticaster : UMCBIKERNELLib._DUBuffer5Events {
        
        private AxUBuffer5 parent;
        
        public AxUBuffer5EventMulticaster(AxUBuffer5 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUBuffer5Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUBuffer5Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUBuffer5Events_ReportADCStatusEvent reportadcstatusEvent = new _DUBuffer5Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportStabilizerEvent reportstabilizerEvent = new _DUBuffer5Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, zeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportStabAdjustment(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUBuffer5Events_ReportStabAdjustmentEvent(dGainPct, dZeroPct, lGainAdj, lZeroAdj, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUBuffer5Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUBuffer5Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUBuffer5Events_ReportUncPresetEvent reportuncpresetEvent = new _DUBuffer5Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportAMPGainEvent reportampgainEvent = new _DUBuffer5Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUBuffer5Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportAMPStatusEvent reportampstatusEvent = new _DUBuffer5Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUBuffer5Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportHVStatusEvent reporthvstatusEvent = new _DUBuffer5Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUBuffer5Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUBuffer5Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUBuffer5Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUBuffer5Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUBuffer5Events_ReportInfoEvent reportinfoEvent = new _DUBuffer5Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUBuffer5Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUBuffer5Events_ReportADCDataEvent reportadcdataEvent = new _DUBuffer5Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUBuffer5Events_ReportMonitorEvent reportmonitorEvent = new _DUBuffer5Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUBuffer5Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUBuffer5Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUBuffer5Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUBuffer5Events_ReportAMPPROEvent reportampproEvent = new _DUBuffer5Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{2421cfd3-1c34-43dc-b578-c91c8d138b72}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportADCSettings")]
    public class AxUBuffer6 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUBuffer6 ocx;
        
        private AxUBuffer6EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUBuffer6() : 
                base("2421cfd3-1c34-43dc-b578-c91c8d138b72") {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IADCValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XAMP2 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAMPValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IStabilizerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XInfo4 IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IInfoValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual UMCBIKERNELLib.XHVPS2 IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IHVPSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDataValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IMCSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPresetsValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IFieldValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Loaded {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Loaded", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Loaded;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Readonly = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAsynchValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual object HardRecs {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecs", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPropertiesValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPowerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDisplayValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual bool HardRecsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HardRecsValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual bool AppReportsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReportsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppReportsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReportsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppReportsValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual object AppReports {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReports", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppReports;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReports", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppReports = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual UMCBIKERNELLib.XAlpha IAlpha {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlpha", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAlpha;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual bool IAlphaValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlphaValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAlphaValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlphaValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAlphaValid = value;
            }
        }
        
        public event _DUBuffer6Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUBuffer6Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUBuffer6Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUBuffer6Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUBuffer6Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUBuffer6Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUBuffer6Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUBuffer6Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUBuffer6Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUBuffer6Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUBuffer6Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUBuffer6Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUBuffer6Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUBuffer6Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUBuffer6Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUBuffer6Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUBuffer6Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUBuffer6Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUBuffer6Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUBuffer6Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUBuffer6Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public event _DUBuffer6Events_ReportHVSettings2EventHandler ReportHVSettings2;
        
        public event _DUBuffer6Events_ReportAlphaEventHandler ReportAlpha;
        
        public event _DUBuffer6Events_ReportAlphaExEventHandler ReportAlphaEx;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual void LoadFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadFile(szFilePath);
        }
        
        public virtual void SaveCHNFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveCHNFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveCHNFile(szFilePath);
        }
        
        public virtual void SaveSPCFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveSPCFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveSPCFile(szFilePath);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUBuffer6EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUBuffer6Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUBuffer6)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUBuffer6Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUBuffer6Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUBuffer6Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUBuffer6Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUBuffer6Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUBuffer6Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUBuffer6Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUBuffer6Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUBuffer6Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUBuffer6Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUBuffer6Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUBuffer6Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUBuffer6Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUBuffer6Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUBuffer6Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUBuffer6Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUBuffer6Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUBuffer6Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUBuffer6Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUBuffer6Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUBuffer6Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings2(object sender, _DUBuffer6Events_ReportHVSettings2Event e) {
            if ((this.ReportHVSettings2 != null)) {
                this.ReportHVSettings2(sender, e);
            }
        }
        
        internal void RaiseOnReportAlpha(object sender, _DUBuffer6Events_ReportAlphaEvent e) {
            if ((this.ReportAlpha != null)) {
                this.ReportAlpha(sender, e);
            }
        }
        
        internal void RaiseOnReportAlphaEx(object sender, _DUBuffer6Events_ReportAlphaExEvent e) {
            if ((this.ReportAlphaEx != null)) {
                this.ReportAlphaEx(sender, e);
            }
        }
    }
    
    public delegate void _DUBuffer6Events_ReportADCSettingsEventHandler(object sender, _DUBuffer6Events_ReportADCSettingsEvent e);
    
    public class _DUBuffer6Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportADCStatusEventHandler(object sender, _DUBuffer6Events_ReportADCStatusEvent e);
    
    public class _DUBuffer6Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportStabilizerEventHandler(object sender, _DUBuffer6Events_ReportStabilizerEvent e);
    
    public class _DUBuffer6Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int zeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.zeroWidth = zeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportStabAdjustmentEventHandler(object sender, _DUBuffer6Events_ReportStabAdjustmentEvent e);
    
    public class _DUBuffer6Events_ReportStabAdjustmentEvent {
        
        public double dGainPct;
        
        public double dZeroPct;
        
        public int lGainAdj;
        
        public int lZeroAdj;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportStabAdjustmentEvent(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            this.dGainPct = dGainPct;
            this.dZeroPct = dZeroPct;
            this.lGainAdj = lGainAdj;
            this.lZeroAdj = lZeroAdj;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportGenPresetsEventHandler(object sender, _DUBuffer6Events_ReportGenPresetsEvent e);
    
    public class _DUBuffer6Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportUncPresetEventHandler(object sender, _DUBuffer6Events_ReportUncPresetEvent e);
    
    public class _DUBuffer6Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportAMPGainEventHandler(object sender, _DUBuffer6Events_ReportAMPGainEvent e);
    
    public class _DUBuffer6Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportAMPSettingsEventHandler(object sender, _DUBuffer6Events_ReportAMPSettingsEvent e);
    
    public class _DUBuffer6Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportAMPStatusEventHandler(object sender, _DUBuffer6Events_ReportAMPStatusEvent e);
    
    public class _DUBuffer6Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportHVSettingsEventHandler(object sender, _DUBuffer6Events_ReportHVSettingsEvent e);
    
    public class _DUBuffer6Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportHVStatusEventHandler(object sender, _DUBuffer6Events_ReportHVStatusEvent e);
    
    public class _DUBuffer6Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportMDAPresetEventHandler(object sender, _DUBuffer6Events_ReportMDAPresetEvent e);
    
    public class _DUBuffer6Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUBuffer6Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportMDACoefficientsEventHandler(object sender, _DUBuffer6Events_ReportMDACoefficientsEvent e);
    
    public class _DUBuffer6Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUBuffer6Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportInfoEventHandler(object sender, _DUBuffer6Events_ReportInfoEvent e);
    
    public class _DUBuffer6Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportAMPAdvancedEventHandler(object sender, _DUBuffer6Events_ReportAMPAdvancedEvent e);
    
    public class _DUBuffer6Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportADCDataEventHandler(object sender, _DUBuffer6Events_ReportADCDataEvent e);
    
    public class _DUBuffer6Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportMonitorEventHandler(object sender, _DUBuffer6Events_ReportMonitorEvent e);
    
    public class _DUBuffer6Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUBuffer6Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportPowerSettingsEventHandler(object sender, _DUBuffer6Events_ReportPowerSettingsEvent e);
    
    public class _DUBuffer6Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportPowerStatusEventHandler(object sender, _DUBuffer6Events_ReportPowerStatusEvent e);
    
    public class _DUBuffer6Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportAMPSpecialEventHandler(object sender, _DUBuffer6Events_ReportAMPSpecialEvent e);
    
    public class _DUBuffer6Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportAMPPROEventHandler(object sender, _DUBuffer6Events_ReportAMPPROEvent e);
    
    public class _DUBuffer6Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportHVSettings2EventHandler(object sender, _DUBuffer6Events_ReportHVSettings2Event e);
    
    public class _DUBuffer6Events_ReportHVSettings2Event {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int lSourceIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportHVSettings2Event(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int lSourceIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.lSourceIndex = lSourceIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportAlphaEventHandler(object sender, _DUBuffer6Events_ReportAlphaEvent e);
    
    public class _DUBuffer6Events_ReportAlphaEvent {
        
        public int vacuumState;
        
        public double vacuumTarg;
        
        public double vacuumAct;
        
        public int bPulserOn;
        
        public int plrVal;
        
        public int digiOffset;
        
        public int configChan;
        
        public int bRcapOn;
        
        public _DUBuffer6Events_ReportAlphaEvent(int vacuumState, double vacuumTarg, double vacuumAct, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            this.vacuumState = vacuumState;
            this.vacuumTarg = vacuumTarg;
            this.vacuumAct = vacuumAct;
            this.bPulserOn = bPulserOn;
            this.plrVal = plrVal;
            this.digiOffset = digiOffset;
            this.configChan = configChan;
            this.bRcapOn = bRcapOn;
        }
    }
    
    public delegate void _DUBuffer6Events_ReportAlphaExEventHandler(object sender, _DUBuffer6Events_ReportAlphaExEvent e);
    
    public class _DUBuffer6Events_ReportAlphaExEvent {
        
        public int lVacuumState;
        
        public int bVacuumStateReadonly;
        
        public double dVacuumTarg;
        
        public double dVacuumAct;
        
        public int bPulserOn;
        
        public int lPulserAmplitude;
        
        public int lDigiOffset;
        
        public int lDisplayChannels;
        
        public int bRcapOn;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer6Events_ReportAlphaExEvent(int lVacuumState, int bVacuumStateReadonly, double dVacuumTarg, double dVacuumAct, int bPulserOn, int lPulserAmplitude, int lDigiOffset, int lDisplayChannels, int bRcapOn, int bReadonly, int lElapsedMS) {
            this.lVacuumState = lVacuumState;
            this.bVacuumStateReadonly = bVacuumStateReadonly;
            this.dVacuumTarg = dVacuumTarg;
            this.dVacuumAct = dVacuumAct;
            this.bPulserOn = bPulserOn;
            this.lPulserAmplitude = lPulserAmplitude;
            this.lDigiOffset = lDigiOffset;
            this.lDisplayChannels = lDisplayChannels;
            this.bRcapOn = bRcapOn;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUBuffer6EventMulticaster : UMCBIKERNELLib._DUBuffer6Events {
        
        private AxUBuffer6 parent;
        
        public AxUBuffer6EventMulticaster(AxUBuffer6 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUBuffer6Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUBuffer6Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUBuffer6Events_ReportADCStatusEvent reportadcstatusEvent = new _DUBuffer6Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportStabilizerEvent reportstabilizerEvent = new _DUBuffer6Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, zeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportStabAdjustment(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUBuffer6Events_ReportStabAdjustmentEvent(dGainPct, dZeroPct, lGainAdj, lZeroAdj, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUBuffer6Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUBuffer6Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUBuffer6Events_ReportUncPresetEvent reportuncpresetEvent = new _DUBuffer6Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportAMPGainEvent reportampgainEvent = new _DUBuffer6Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUBuffer6Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportAMPStatusEvent reportampstatusEvent = new _DUBuffer6Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUBuffer6Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportHVStatusEvent reporthvstatusEvent = new _DUBuffer6Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUBuffer6Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUBuffer6Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUBuffer6Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUBuffer6Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUBuffer6Events_ReportInfoEvent reportinfoEvent = new _DUBuffer6Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUBuffer6Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUBuffer6Events_ReportADCDataEvent reportadcdataEvent = new _DUBuffer6Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUBuffer6Events_ReportMonitorEvent reportmonitorEvent = new _DUBuffer6Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUBuffer6Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUBuffer6Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUBuffer6Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportAMPPROEvent reportampproEvent = new _DUBuffer6Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
        
        public virtual void ReportHVSettings2(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int lSourceIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportHVSettings2Event reporthvsettings2Event = new _DUBuffer6Events_ReportHVSettings2Event(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, lSourceIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings2(this.parent, reporthvsettings2Event);
        }
        
        public virtual void ReportAlpha(int vacuumState, double vacuumTarg, double vacuumAct, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            _DUBuffer6Events_ReportAlphaEvent reportalphaEvent = new _DUBuffer6Events_ReportAlphaEvent(vacuumState, vacuumTarg, vacuumAct, bPulserOn, plrVal, digiOffset, configChan, bRcapOn);
            this.parent.RaiseOnReportAlpha(this.parent, reportalphaEvent);
        }
        
        public virtual void ReportAlphaEx(int lVacuumState, int bVacuumStateReadonly, double dVacuumTarg, double dVacuumAct, int bPulserOn, int lPulserAmplitude, int lDigiOffset, int lDisplayChannels, int bRcapOn, int bReadonly, int lElapsedMS) {
            _DUBuffer6Events_ReportAlphaExEvent reportalphaexEvent = new _DUBuffer6Events_ReportAlphaExEvent(lVacuumState, bVacuumStateReadonly, dVacuumTarg, dVacuumAct, bPulserOn, lPulserAmplitude, lDigiOffset, lDisplayChannels, bRcapOn, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAlphaEx(this.parent, reportalphaexEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{d69b94fa-96a8-44cb-8844-437404593eb2}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReportADCSettings")]
    public class AxUBuffer7 : System.Windows.Forms.AxHost {
        
        private UMCBIKERNELLib._DUBuffer7 ocx;
        
        private AxUBuffer7EventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxUBuffer7() : 
                base("d69b94fa-96a8-44cb-8844-437404593eb2") {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual UMCBIKERNELLib.XADC IADC {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADC", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADC;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool IADCValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IADCValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IADCValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IADCValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual UMCBIKERNELLib.XAMP3 IAMP {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMP", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMP;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool IAMPValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAMPValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAMPValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAMPValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual UMCBIKERNELLib.XStabilizer IStabilizer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizer;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool IStabilizerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IStabilizerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IStabilizerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IStabilizerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual UMCBIKERNELLib.XInfo4 IInfo {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfo;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool IInfoValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IInfoValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IInfoValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IInfoValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual UMCBIKERNELLib.XHVPS2 IHVPS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool IHVPSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IHVPSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IHVPSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IHVPSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual UMCBIKERNELLib.XData IData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IData;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool IDataValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDataValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDataValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDataValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual UMCBIKERNELLib.XMCS IMCS {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCS", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCS;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual bool IMCSValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IMCSValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IMCSValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IMCSValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual UMCBIKERNELLib.XPresets IPresets {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresets", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresets;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual bool IPresetsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPresetsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPresetsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPresetsValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual UMCBIKERNELLib.XField IField {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IField", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IField;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual bool IFieldValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IFieldValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IFieldValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IFieldValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool Loaded {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Loaded", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Loaded;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        public virtual bool Readonly {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Readonly;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Readonly", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Readonly = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual UMCBIKERNELLib.XAsynch IAsynch {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynch", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynch;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual bool IAsynchValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAsynchValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAsynchValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAsynchValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual object HardRecs {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecs", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual UMCBIKERNELLib.XProperties IProperties {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IProperties;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual bool IPropertiesValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPropertiesValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPropertiesValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPropertiesValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual UMCBIKERNELLib.XPower IPower {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPower", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPower;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual bool IPowerValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IPowerValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IPowerValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IPowerValid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual UMCBIKERNELLib.XDisplay IDisplay {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplay;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual bool IDisplayValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IDisplayValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IDisplayValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IDisplayValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual short VerMajor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMajor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMajor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(31)]
        public virtual short VerMinor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VerMinor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VerMinor;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual bool HardRecsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HardRecsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HardRecsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HardRecsValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual bool AppReportsValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReportsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppReportsValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReportsValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppReportsValid = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual object AppReports {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReports", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AppReports;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AppReports", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AppReports = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual UMCBIKERNELLib.XAlpha IAlpha {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlpha", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAlpha;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual bool IAlphaValid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlphaValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IAlphaValid;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IAlphaValid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IAlphaValid = value;
            }
        }
        
        public event _DUBuffer7Events_ReportADCSettingsEventHandler ReportADCSettings;
        
        public event _DUBuffer7Events_ReportADCStatusEventHandler ReportADCStatus;
        
        public event _DUBuffer7Events_ReportStabilizerEventHandler ReportStabilizer;
        
        public event _DUBuffer7Events_ReportStabAdjustmentEventHandler ReportStabAdjustment;
        
        public event _DUBuffer7Events_ReportGenPresetsEventHandler ReportGenPresets;
        
        public event _DUBuffer7Events_ReportUncPresetEventHandler ReportUncPreset;
        
        public event _DUBuffer7Events_ReportAMPGainEventHandler ReportAMPGain;
        
        public event _DUBuffer7Events_ReportAMPSettingsEventHandler ReportAMPSettings;
        
        public event _DUBuffer7Events_ReportAMPStatusEventHandler ReportAMPStatus;
        
        public event _DUBuffer7Events_ReportHVSettingsEventHandler ReportHVSettings;
        
        public event _DUBuffer7Events_ReportHVStatusEventHandler ReportHVStatus;
        
        public event _DUBuffer7Events_ReportMDAPresetEventHandler ReportMDAPreset;
        
        public event _DUBuffer7Events_ReportMDACoefficientsEventHandler ReportMDACoefficients;
        
        public event _DUBuffer7Events_ReportInfoEventHandler ReportInfo;
        
        public event _DUBuffer7Events_ReportAMPAdvancedEventHandler ReportAMPAdvanced;
        
        public event _DUBuffer7Events_ReportADCDataEventHandler ReportADCData;
        
        public event _DUBuffer7Events_ReportMonitorEventHandler ReportMonitor;
        
        public event _DUBuffer7Events_ReportPowerSettingsEventHandler ReportPowerSettings;
        
        public event _DUBuffer7Events_ReportPowerStatusEventHandler ReportPowerStatus;
        
        public event _DUBuffer7Events_ReportAMPSpecialEventHandler ReportAMPSpecial;
        
        public event _DUBuffer7Events_ReportAMPPROEventHandler ReportAMPPRO;
        
        public event _DUBuffer7Events_ReportHVSettings2EventHandler ReportHVSettings2;
        
        public event _DUBuffer7Events_ReportAlphaEventHandler ReportAlpha;
        
        public event _DUBuffer7Events_ReportAlphaExEventHandler ReportAlphaEx;
        
        public virtual void Clear() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear();
        }
        
        public virtual void LoadFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadFile(szFilePath);
        }
        
        public virtual void SaveCHNFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveCHNFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveCHNFile(szFilePath);
        }
        
        public virtual void SaveSPCFile(string szFilePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveSPCFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveSPCFile(szFilePath);
        }
        
        public virtual void CopyFrom(object lpIUnknown) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyFrom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyFrom(lpIUnknown);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxUBuffer7EventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(UMCBIKERNELLib._DUBuffer7Events));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((UMCBIKERNELLib._DUBuffer7)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnReportADCSettings(object sender, _DUBuffer7Events_ReportADCSettingsEvent e) {
            if ((this.ReportADCSettings != null)) {
                this.ReportADCSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportADCStatus(object sender, _DUBuffer7Events_ReportADCStatusEvent e) {
            if ((this.ReportADCStatus != null)) {
                this.ReportADCStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportStabilizer(object sender, _DUBuffer7Events_ReportStabilizerEvent e) {
            if ((this.ReportStabilizer != null)) {
                this.ReportStabilizer(sender, e);
            }
        }
        
        internal void RaiseOnReportStabAdjustment(object sender, _DUBuffer7Events_ReportStabAdjustmentEvent e) {
            if ((this.ReportStabAdjustment != null)) {
                this.ReportStabAdjustment(sender, e);
            }
        }
        
        internal void RaiseOnReportGenPresets(object sender, _DUBuffer7Events_ReportGenPresetsEvent e) {
            if ((this.ReportGenPresets != null)) {
                this.ReportGenPresets(sender, e);
            }
        }
        
        internal void RaiseOnReportUncPreset(object sender, _DUBuffer7Events_ReportUncPresetEvent e) {
            if ((this.ReportUncPreset != null)) {
                this.ReportUncPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPGain(object sender, _DUBuffer7Events_ReportAMPGainEvent e) {
            if ((this.ReportAMPGain != null)) {
                this.ReportAMPGain(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSettings(object sender, _DUBuffer7Events_ReportAMPSettingsEvent e) {
            if ((this.ReportAMPSettings != null)) {
                this.ReportAMPSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPStatus(object sender, _DUBuffer7Events_ReportAMPStatusEvent e) {
            if ((this.ReportAMPStatus != null)) {
                this.ReportAMPStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings(object sender, _DUBuffer7Events_ReportHVSettingsEvent e) {
            if ((this.ReportHVSettings != null)) {
                this.ReportHVSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportHVStatus(object sender, _DUBuffer7Events_ReportHVStatusEvent e) {
            if ((this.ReportHVStatus != null)) {
                this.ReportHVStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportMDAPreset(object sender, _DUBuffer7Events_ReportMDAPresetEvent e) {
            if ((this.ReportMDAPreset != null)) {
                this.ReportMDAPreset(sender, e);
            }
        }
        
        internal void RaiseOnReportMDACoefficients(object sender, _DUBuffer7Events_ReportMDACoefficientsEvent e) {
            if ((this.ReportMDACoefficients != null)) {
                this.ReportMDACoefficients(sender, e);
            }
        }
        
        internal void RaiseOnReportInfo(object sender, _DUBuffer7Events_ReportInfoEvent e) {
            if ((this.ReportInfo != null)) {
                this.ReportInfo(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPAdvanced(object sender, _DUBuffer7Events_ReportAMPAdvancedEvent e) {
            if ((this.ReportAMPAdvanced != null)) {
                this.ReportAMPAdvanced(sender, e);
            }
        }
        
        internal void RaiseOnReportADCData(object sender, _DUBuffer7Events_ReportADCDataEvent e) {
            if ((this.ReportADCData != null)) {
                this.ReportADCData(sender, e);
            }
        }
        
        internal void RaiseOnReportMonitor(object sender, _DUBuffer7Events_ReportMonitorEvent e) {
            if ((this.ReportMonitor != null)) {
                this.ReportMonitor(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerSettings(object sender, _DUBuffer7Events_ReportPowerSettingsEvent e) {
            if ((this.ReportPowerSettings != null)) {
                this.ReportPowerSettings(sender, e);
            }
        }
        
        internal void RaiseOnReportPowerStatus(object sender, _DUBuffer7Events_ReportPowerStatusEvent e) {
            if ((this.ReportPowerStatus != null)) {
                this.ReportPowerStatus(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPSpecial(object sender, _DUBuffer7Events_ReportAMPSpecialEvent e) {
            if ((this.ReportAMPSpecial != null)) {
                this.ReportAMPSpecial(sender, e);
            }
        }
        
        internal void RaiseOnReportAMPPRO(object sender, _DUBuffer7Events_ReportAMPPROEvent e) {
            if ((this.ReportAMPPRO != null)) {
                this.ReportAMPPRO(sender, e);
            }
        }
        
        internal void RaiseOnReportHVSettings2(object sender, _DUBuffer7Events_ReportHVSettings2Event e) {
            if ((this.ReportHVSettings2 != null)) {
                this.ReportHVSettings2(sender, e);
            }
        }
        
        internal void RaiseOnReportAlpha(object sender, _DUBuffer7Events_ReportAlphaEvent e) {
            if ((this.ReportAlpha != null)) {
                this.ReportAlpha(sender, e);
            }
        }
        
        internal void RaiseOnReportAlphaEx(object sender, _DUBuffer7Events_ReportAlphaExEvent e) {
            if ((this.ReportAlphaEx != null)) {
                this.ReportAlphaEx(sender, e);
            }
        }
    }
    
    public delegate void _DUBuffer7Events_ReportADCSettingsEventHandler(object sender, _DUBuffer7Events_ReportADCSettingsEvent e);
    
    public class _DUBuffer7Events_ReportADCSettingsEvent {
        
        public int bSettingsReadonly;
        
        public int lConvGain;
        
        public int lDigitalOffset;
        
        public double dFineOffset;
        
        public int lLLD;
        
        public int lULD;
        
        public int lGateIndex;
        
        public int lTypeIndex;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportADCSettingsEvent(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            this.bSettingsReadonly = bSettingsReadonly;
            this.lConvGain = lConvGain;
            this.lDigitalOffset = lDigitalOffset;
            this.dFineOffset = dFineOffset;
            this.lLLD = lLLD;
            this.lULD = lULD;
            this.lGateIndex = lGateIndex;
            this.lTypeIndex = lTypeIndex;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportADCStatusEventHandler(object sender, _DUBuffer7Events_ReportADCStatusEvent e);
    
    public class _DUBuffer7Events_ReportADCStatusEvent {
        
        public int bTimesValid;
        
        public int bTimesReadonly;
        
        public double dLiveTime;
        
        public double dRealTime;
        
        public int bActive;
        
        public int lHardwareStat;
        
        public int bZDTModeReadonly;
        
        public int lZDTMode;
        
        public int lCRM;
        
        public int lAcqMode;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportADCStatusEvent(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            this.bTimesValid = bTimesValid;
            this.bTimesReadonly = bTimesReadonly;
            this.dLiveTime = dLiveTime;
            this.dRealTime = dRealTime;
            this.bActive = bActive;
            this.lHardwareStat = lHardwareStat;
            this.bZDTModeReadonly = bZDTModeReadonly;
            this.lZDTMode = lZDTMode;
            this.lCRM = lCRM;
            this.lAcqMode = lAcqMode;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportStabilizerEventHandler(object sender, _DUBuffer7Events_ReportStabilizerEvent e);
    
    public class _DUBuffer7Events_ReportStabilizerEvent {
        
        public int bGainEnabled;
        
        public int lGainChan;
        
        public int lGainWidth;
        
        public int bZeroEnabled;
        
        public int lZeroChan;
        
        public int zeroWidth;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportStabilizerEvent(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            this.bGainEnabled = bGainEnabled;
            this.lGainChan = lGainChan;
            this.lGainWidth = lGainWidth;
            this.bZeroEnabled = bZeroEnabled;
            this.lZeroChan = lZeroChan;
            this.zeroWidth = zeroWidth;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportStabAdjustmentEventHandler(object sender, _DUBuffer7Events_ReportStabAdjustmentEvent e);
    
    public class _DUBuffer7Events_ReportStabAdjustmentEvent {
        
        public double dGainPct;
        
        public double dZeroPct;
        
        public int lGainAdj;
        
        public int lZeroAdj;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportStabAdjustmentEvent(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            this.dGainPct = dGainPct;
            this.dZeroPct = dZeroPct;
            this.lGainAdj = lGainAdj;
            this.lZeroAdj = lZeroAdj;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportGenPresetsEventHandler(object sender, _DUBuffer7Events_ReportGenPresetsEvent e);
    
    public class _DUBuffer7Events_ReportGenPresetsEvent {
        
        public int bPresetsReadonly;
        
        public double dRealTime;
        
        public double dLiveTime;
        
        public int lIntegral;
        
        public int lPeak;
        
        public int bOverflow;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportGenPresetsEvent(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.dRealTime = dRealTime;
            this.dLiveTime = dLiveTime;
            this.lIntegral = lIntegral;
            this.lPeak = lPeak;
            this.bOverflow = bOverflow;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportUncPresetEventHandler(object sender, _DUBuffer7Events_ReportUncPresetEvent e);
    
    public class _DUBuffer7Events_ReportUncPresetEvent {
        
        public int bPresetsReadonly;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportUncPresetEvent(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            this.bPresetsReadonly = bPresetsReadonly;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportAMPGainEventHandler(object sender, _DUBuffer7Events_ReportAMPGainEvent e);
    
    public class _DUBuffer7Events_ReportAMPGainEvent {
        
        public int lCoarseGain;
        
        public double dFineGain;
        
        public double dTotalGain;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportAMPGainEvent(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            this.lCoarseGain = lCoarseGain;
            this.dFineGain = dFineGain;
            this.dTotalGain = dTotalGain;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportAMPSettingsEventHandler(object sender, _DUBuffer7Events_ReportAMPSettingsEvent e);
    
    public class _DUBuffer7Events_ReportAMPSettingsEvent {
        
        public int lDiscreteBLRIndex;
        
        public int bPloarityPositive;
        
        public int bPUREnabled;
        
        public int lPreampTypeIndex;
        
        public int lRawShaping;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportAMPSettingsEvent(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            this.lDiscreteBLRIndex = lDiscreteBLRIndex;
            this.bPloarityPositive = bPloarityPositive;
            this.bPUREnabled = bPUREnabled;
            this.lPreampTypeIndex = lPreampTypeIndex;
            this.lRawShaping = lRawShaping;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportAMPStatusEventHandler(object sender, _DUBuffer7Events_ReportAMPStatusEvent e);
    
    public class _DUBuffer7Events_ReportAMPStatusEvent {
        
        public int bPZInProgress;
        
        public int bOptiInProgress;
        
        public int bNeedsPZ;
        
        public int bNeedsOpti;
        
        public double dBLR;
        
        public int lManualPZ;
        
        public int bReadonly;
        
        public int bManualPZReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportAMPStatusEvent(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            this.bPZInProgress = bPZInProgress;
            this.bOptiInProgress = bOptiInProgress;
            this.bNeedsPZ = bNeedsPZ;
            this.bNeedsOpti = bNeedsOpti;
            this.dBLR = dBLR;
            this.lManualPZ = lManualPZ;
            this.bReadonly = bReadonly;
            this.bManualPZReadonly = bManualPZReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportHVSettingsEventHandler(object sender, _DUBuffer7Events_ReportHVSettingsEvent e);
    
    public class _DUBuffer7Events_ReportHVSettingsEvent {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportHVSettingsEvent(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportHVStatusEventHandler(object sender, _DUBuffer7Events_ReportHVStatusEvent e);
    
    public class _DUBuffer7Events_ReportHVStatusEvent {
        
        public int bShutdown;
        
        public int bOverload;
        
        public double dVoltage;
        
        public double dCurrent;
        
        public int bVoltageActual;
        
        public double dActualVoltage;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportHVStatusEvent(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            this.bShutdown = bShutdown;
            this.bOverload = bOverload;
            this.dVoltage = dVoltage;
            this.dCurrent = dCurrent;
            this.bVoltageActual = bVoltageActual;
            this.dActualVoltage = dActualVoltage;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportMDAPresetEventHandler(object sender, _DUBuffer7Events_ReportMDAPresetEvent e);
    
    public class _DUBuffer7Events_ReportMDAPresetEvent {
        
        public int bValid;
        
        public int bReadonly;
        
        public int lIndex;
        
        public int lStart;
        
        public int lLength;
        
        public double dPreset;
        
        public double dUser;
        
        public double dEnergy;
        
        public double dYield;
        
        public string szNuclide;
        
        public _DUBuffer7Events_ReportMDAPresetEvent(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            this.bValid = bValid;
            this.bReadonly = bReadonly;
            this.lIndex = lIndex;
            this.lStart = lStart;
            this.lLength = lLength;
            this.dPreset = dPreset;
            this.dUser = dUser;
            this.dEnergy = dEnergy;
            this.dYield = dYield;
            this.szNuclide = szNuclide;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportMDACoefficientsEventHandler(object sender, _DUBuffer7Events_ReportMDACoefficientsEvent e);
    
    public class _DUBuffer7Events_ReportMDACoefficientsEvent {
        
        public int lCount;
        
        public double dCoef0;
        
        public double dCoef1;
        
        public double dCoef2;
        
        public _DUBuffer7Events_ReportMDACoefficientsEvent(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            this.lCount = lCount;
            this.dCoef0 = dCoef0;
            this.dCoef1 = dCoef1;
            this.dCoef2 = dCoef2;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportInfoEventHandler(object sender, _DUBuffer7Events_ReportInfoEvent e);
    
    public class _DUBuffer7Events_ReportInfoEvent {
        
        public int bReadonly;
        
        public System.DateTime dtStartTime;
        
        public int lId;
        
        public string szDetectorDescription;
        
        public string szSampleDescription;
        
        public string szAcqMode;
        
        public int bLocked;
        
        public string szLockOwner;
        
        public double dThermistor;
        
        public double dVacuum;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportInfoEvent(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            this.bReadonly = bReadonly;
            this.dtStartTime = dtStartTime;
            this.lId = lId;
            this.szDetectorDescription = szDetectorDescription;
            this.szSampleDescription = szSampleDescription;
            this.szAcqMode = szAcqMode;
            this.bLocked = bLocked;
            this.szLockOwner = szLockOwner;
            this.dThermistor = dThermistor;
            this.dVacuum = dVacuum;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportAMPAdvancedEventHandler(object sender, _DUBuffer7Events_ReportAMPAdvancedEvent e);
    
    public class _DUBuffer7Events_ReportAMPAdvancedEvent {
        
        public double dRiseTime;
        
        public double dFlatWidth;
        
        public double dFlatTilt;
        
        public double dCusp;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportAMPAdvancedEvent(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            this.dRiseTime = dRiseTime;
            this.dFlatWidth = dFlatWidth;
            this.dFlatTilt = dFlatTilt;
            this.dCusp = dCusp;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportADCDataEventHandler(object sender, _DUBuffer7Events_ReportADCDataEvent e);
    
    public class _DUBuffer7Events_ReportADCDataEvent {
        
        public int lStart;
        
        public int lLength;
        
        public int lView;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportADCDataEvent(int lStart, int lLength, int lView, int lElapsedMS) {
            this.lStart = lStart;
            this.lLength = lLength;
            this.lView = lView;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportMonitorEventHandler(object sender, _DUBuffer7Events_ReportMonitorEvent e);
    
    public class _DUBuffer7Events_ReportMonitorEvent {
        
        public string szItemIndices;
        
        public string szItem1Report;
        
        public string szItem2Report;
        
        public string szItem3Report;
        
        public string szItem4Report;
        
        public string szItem5Report;
        
        public string szItem6Report;
        
        public string szItem7Report;
        
        public string szItem8Report;
        
        public _DUBuffer7Events_ReportMonitorEvent(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            this.szItemIndices = szItemIndices;
            this.szItem1Report = szItem1Report;
            this.szItem2Report = szItem2Report;
            this.szItem3Report = szItem3Report;
            this.szItem4Report = szItem4Report;
            this.szItem5Report = szItem5Report;
            this.szItem6Report = szItem6Report;
            this.szItem7Report = szItem7Report;
            this.szItem8Report = szItem8Report;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportPowerSettingsEventHandler(object sender, _DUBuffer7Events_ReportPowerSettingsEvent e);
    
    public class _DUBuffer7Events_ReportPowerSettingsEvent {
        
        public int lStartDelay;
        
        public int lConserveDelay;
        
        public int lOffDelay;
        
        public int lModeIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportPowerSettingsEvent(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            this.lStartDelay = lStartDelay;
            this.lConserveDelay = lConserveDelay;
            this.lOffDelay = lOffDelay;
            this.lModeIndex = lModeIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportPowerStatusEventHandler(object sender, _DUBuffer7Events_ReportPowerStatusEvent e);
    
    public class _DUBuffer7Events_ReportPowerStatusEvent {
        
        public int lStartRemaining;
        
        public int lConserveRemaining;
        
        public int lOffRemaining;
        
        public double dBatt1Voltage;
        
        public double dBatt1Current;
        
        public double dBatt2Voltage;
        
        public double dBatt2Current;
        
        public int lSourceIndex;
        
        public int bSourceReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportPowerStatusEvent(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            this.lStartRemaining = lStartRemaining;
            this.lConserveRemaining = lConserveRemaining;
            this.lOffRemaining = lOffRemaining;
            this.dBatt1Voltage = dBatt1Voltage;
            this.dBatt1Current = dBatt1Current;
            this.dBatt2Voltage = dBatt2Voltage;
            this.dBatt2Current = dBatt2Current;
            this.lSourceIndex = lSourceIndex;
            this.bSourceReadonly = bSourceReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportAMPSpecialEventHandler(object sender, _DUBuffer7Events_ReportAMPSpecialEvent e);
    
    public class _DUBuffer7Events_ReportAMPSpecialEvent {
        
        public int lThresholdIndex;
        
        public int lRoutingIndex;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportAMPSpecialEvent(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            this.lThresholdIndex = lThresholdIndex;
            this.lRoutingIndex = lRoutingIndex;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportAMPPROEventHandler(object sender, _DUBuffer7Events_ReportAMPPROEvent e);
    
    public class _DUBuffer7Events_ReportAMPPROEvent {
        
        public int bLFREnabled;
        
        public int bHTEnabled;
        
        public double dHTTime;
        
        public int bResEnhEnabled;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportAMPPROEvent(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            this.bLFREnabled = bLFREnabled;
            this.bHTEnabled = bHTEnabled;
            this.dHTTime = dHTTime;
            this.bResEnhEnabled = bResEnhEnabled;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportHVSettings2EventHandler(object sender, _DUBuffer7Events_ReportHVSettings2Event e);
    
    public class _DUBuffer7Events_ReportHVSettings2Event {
        
        public int bTargetValid;
        
        public double dTargetVoltage;
        
        public int bEnabled;
        
        public int lRiseTime;
        
        public int bPolarityPositive;
        
        public int bPolarityReadonly;
        
        public int lShutdownIndex;
        
        public int lSourceIndex;
        
        public int bNaIEnabled;
        
        public int bNaIReadonly;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportHVSettings2Event(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int lSourceIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            this.bTargetValid = bTargetValid;
            this.dTargetVoltage = dTargetVoltage;
            this.bEnabled = bEnabled;
            this.lRiseTime = lRiseTime;
            this.bPolarityPositive = bPolarityPositive;
            this.bPolarityReadonly = bPolarityReadonly;
            this.lShutdownIndex = lShutdownIndex;
            this.lSourceIndex = lSourceIndex;
            this.bNaIEnabled = bNaIEnabled;
            this.bNaIReadonly = bNaIReadonly;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportAlphaEventHandler(object sender, _DUBuffer7Events_ReportAlphaEvent e);
    
    public class _DUBuffer7Events_ReportAlphaEvent {
        
        public int vacuumState;
        
        public double vacuumTarg;
        
        public double vacuumAct;
        
        public int bPulserOn;
        
        public int plrVal;
        
        public int digiOffset;
        
        public int configChan;
        
        public int bRcapOn;
        
        public _DUBuffer7Events_ReportAlphaEvent(int vacuumState, double vacuumTarg, double vacuumAct, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            this.vacuumState = vacuumState;
            this.vacuumTarg = vacuumTarg;
            this.vacuumAct = vacuumAct;
            this.bPulserOn = bPulserOn;
            this.plrVal = plrVal;
            this.digiOffset = digiOffset;
            this.configChan = configChan;
            this.bRcapOn = bRcapOn;
        }
    }
    
    public delegate void _DUBuffer7Events_ReportAlphaExEventHandler(object sender, _DUBuffer7Events_ReportAlphaExEvent e);
    
    public class _DUBuffer7Events_ReportAlphaExEvent {
        
        public int lVacuumState;
        
        public int bVacuumStateReadonly;
        
        public double dVacuumTarg;
        
        public double dVacuumAct;
        
        public int bPulserOn;
        
        public int lPulserAmplitude;
        
        public int lDigiOffset;
        
        public int lDisplayChannels;
        
        public int bRcapOn;
        
        public int bReadonly;
        
        public int lElapsedMS;
        
        public _DUBuffer7Events_ReportAlphaExEvent(int lVacuumState, int bVacuumStateReadonly, double dVacuumTarg, double dVacuumAct, int bPulserOn, int lPulserAmplitude, int lDigiOffset, int lDisplayChannels, int bRcapOn, int bReadonly, int lElapsedMS) {
            this.lVacuumState = lVacuumState;
            this.bVacuumStateReadonly = bVacuumStateReadonly;
            this.dVacuumTarg = dVacuumTarg;
            this.dVacuumAct = dVacuumAct;
            this.bPulserOn = bPulserOn;
            this.lPulserAmplitude = lPulserAmplitude;
            this.lDigiOffset = lDigiOffset;
            this.lDisplayChannels = lDisplayChannels;
            this.bRcapOn = bRcapOn;
            this.bReadonly = bReadonly;
            this.lElapsedMS = lElapsedMS;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxUBuffer7EventMulticaster : UMCBIKERNELLib._DUBuffer7Events {
        
        private AxUBuffer7 parent;
        
        public AxUBuffer7EventMulticaster(AxUBuffer7 parent) {
            this.parent = parent;
        }
        
        public virtual void ReportADCSettings(int bSettingsReadonly, int lConvGain, int lDigitalOffset, double dFineOffset, int lLLD, int lULD, int lGateIndex, int lTypeIndex, int lElapsedMS) {
            _DUBuffer7Events_ReportADCSettingsEvent reportadcsettingsEvent = new _DUBuffer7Events_ReportADCSettingsEvent(bSettingsReadonly, lConvGain, lDigitalOffset, dFineOffset, lLLD, lULD, lGateIndex, lTypeIndex, lElapsedMS);
            this.parent.RaiseOnReportADCSettings(this.parent, reportadcsettingsEvent);
        }
        
        public virtual void ReportADCStatus(int bTimesValid, int bTimesReadonly, double dLiveTime, double dRealTime, int bActive, int lHardwareStat, int bZDTModeReadonly, int lZDTMode, int lCRM, int lAcqMode, int lElapsedMS) {
            _DUBuffer7Events_ReportADCStatusEvent reportadcstatusEvent = new _DUBuffer7Events_ReportADCStatusEvent(bTimesValid, bTimesReadonly, dLiveTime, dRealTime, bActive, lHardwareStat, bZDTModeReadonly, lZDTMode, lCRM, lAcqMode, lElapsedMS);
            this.parent.RaiseOnReportADCStatus(this.parent, reportadcstatusEvent);
        }
        
        public virtual void ReportStabilizer(int bGainEnabled, int lGainChan, int lGainWidth, int bZeroEnabled, int lZeroChan, int zeroWidth, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportStabilizerEvent reportstabilizerEvent = new _DUBuffer7Events_ReportStabilizerEvent(bGainEnabled, lGainChan, lGainWidth, bZeroEnabled, lZeroChan, zeroWidth, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabilizer(this.parent, reportstabilizerEvent);
        }
        
        public virtual void ReportStabAdjustment(double dGainPct, double dZeroPct, int lGainAdj, int lZeroAdj, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportStabAdjustmentEvent reportstabadjustmentEvent = new _DUBuffer7Events_ReportStabAdjustmentEvent(dGainPct, dZeroPct, lGainAdj, lZeroAdj, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportStabAdjustment(this.parent, reportstabadjustmentEvent);
        }
        
        public virtual void ReportGenPresets(int bPresetsReadonly, double dRealTime, double dLiveTime, int lIntegral, int lPeak, int bOverflow, int lElapsedMS) {
            _DUBuffer7Events_ReportGenPresetsEvent reportgenpresetsEvent = new _DUBuffer7Events_ReportGenPresetsEvent(bPresetsReadonly, dRealTime, dLiveTime, lIntegral, lPeak, bOverflow, lElapsedMS);
            this.parent.RaiseOnReportGenPresets(this.parent, reportgenpresetsEvent);
        }
        
        public virtual void ReportUncPreset(int bPresetsReadonly, int lStart, int lLength, double dPreset, int lElapsedMS) {
            _DUBuffer7Events_ReportUncPresetEvent reportuncpresetEvent = new _DUBuffer7Events_ReportUncPresetEvent(bPresetsReadonly, lStart, lLength, dPreset, lElapsedMS);
            this.parent.RaiseOnReportUncPreset(this.parent, reportuncpresetEvent);
        }
        
        public virtual void ReportAMPGain(int lCoarseGain, double dFineGain, double dTotalGain, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportAMPGainEvent reportampgainEvent = new _DUBuffer7Events_ReportAMPGainEvent(lCoarseGain, dFineGain, dTotalGain, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPGain(this.parent, reportampgainEvent);
        }
        
        public virtual void ReportAMPSettings(int lDiscreteBLRIndex, int bPloarityPositive, int bPUREnabled, int lPreampTypeIndex, int lRawShaping, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportAMPSettingsEvent reportampsettingsEvent = new _DUBuffer7Events_ReportAMPSettingsEvent(lDiscreteBLRIndex, bPloarityPositive, bPUREnabled, lPreampTypeIndex, lRawShaping, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSettings(this.parent, reportampsettingsEvent);
        }
        
        public virtual void ReportAMPStatus(int bPZInProgress, int bOptiInProgress, int bNeedsPZ, int bNeedsOpti, double dBLR, int lManualPZ, int bReadonly, int bManualPZReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportAMPStatusEvent reportampstatusEvent = new _DUBuffer7Events_ReportAMPStatusEvent(bPZInProgress, bOptiInProgress, bNeedsPZ, bNeedsOpti, dBLR, lManualPZ, bReadonly, bManualPZReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPStatus(this.parent, reportampstatusEvent);
        }
        
        public virtual void ReportHVSettings(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportHVSettingsEvent reporthvsettingsEvent = new _DUBuffer7Events_ReportHVSettingsEvent(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings(this.parent, reporthvsettingsEvent);
        }
        
        public virtual void ReportHVStatus(int bShutdown, int bOverload, double dVoltage, double dCurrent, int bVoltageActual, double dActualVoltage, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportHVStatusEvent reporthvstatusEvent = new _DUBuffer7Events_ReportHVStatusEvent(bShutdown, bOverload, dVoltage, dCurrent, bVoltageActual, dActualVoltage, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVStatus(this.parent, reporthvstatusEvent);
        }
        
        public virtual void ReportMDAPreset(int bValid, int bReadonly, int lIndex, int lStart, int lLength, double dPreset, double dUser, double dEnergy, double dYield, string szNuclide) {
            _DUBuffer7Events_ReportMDAPresetEvent reportmdapresetEvent = new _DUBuffer7Events_ReportMDAPresetEvent(bValid, bReadonly, lIndex, lStart, lLength, dPreset, dUser, dEnergy, dYield, szNuclide);
            this.parent.RaiseOnReportMDAPreset(this.parent, reportmdapresetEvent);
        }
        
        public virtual void ReportMDACoefficients(int lCount, double dCoef0, double dCoef1, double dCoef2) {
            _DUBuffer7Events_ReportMDACoefficientsEvent reportmdacoefficientsEvent = new _DUBuffer7Events_ReportMDACoefficientsEvent(lCount, dCoef0, dCoef1, dCoef2);
            this.parent.RaiseOnReportMDACoefficients(this.parent, reportmdacoefficientsEvent);
        }
        
        public virtual void ReportInfo(int bReadonly, System.DateTime dtStartTime, int lId, string szDetectorDescription, string szSampleDescription, string szAcqMode, int bLocked, string szLockOwner, double dThermistor, double dVacuum, int lElapsedMS) {
            _DUBuffer7Events_ReportInfoEvent reportinfoEvent = new _DUBuffer7Events_ReportInfoEvent(bReadonly, dtStartTime, lId, szDetectorDescription, szSampleDescription, szAcqMode, bLocked, szLockOwner, dThermistor, dVacuum, lElapsedMS);
            this.parent.RaiseOnReportInfo(this.parent, reportinfoEvent);
        }
        
        public virtual void ReportAMPAdvanced(double dRiseTime, double dFlatWidth, double dFlatTilt, double dCusp, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportAMPAdvancedEvent reportampadvancedEvent = new _DUBuffer7Events_ReportAMPAdvancedEvent(dRiseTime, dFlatWidth, dFlatTilt, dCusp, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPAdvanced(this.parent, reportampadvancedEvent);
        }
        
        public virtual void ReportADCData(int lStart, int lLength, int lView, int lElapsedMS) {
            _DUBuffer7Events_ReportADCDataEvent reportadcdataEvent = new _DUBuffer7Events_ReportADCDataEvent(lStart, lLength, lView, lElapsedMS);
            this.parent.RaiseOnReportADCData(this.parent, reportadcdataEvent);
        }
        
        public virtual void ReportMonitor(string szItemIndices, string szItem1Report, string szItem2Report, string szItem3Report, string szItem4Report, string szItem5Report, string szItem6Report, string szItem7Report, string szItem8Report) {
            _DUBuffer7Events_ReportMonitorEvent reportmonitorEvent = new _DUBuffer7Events_ReportMonitorEvent(szItemIndices, szItem1Report, szItem2Report, szItem3Report, szItem4Report, szItem5Report, szItem6Report, szItem7Report, szItem8Report);
            this.parent.RaiseOnReportMonitor(this.parent, reportmonitorEvent);
        }
        
        public virtual void ReportPowerSettings(int lStartDelay, int lConserveDelay, int lOffDelay, int lModeIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportPowerSettingsEvent reportpowersettingsEvent = new _DUBuffer7Events_ReportPowerSettingsEvent(lStartDelay, lConserveDelay, lOffDelay, lModeIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerSettings(this.parent, reportpowersettingsEvent);
        }
        
        public virtual void ReportPowerStatus(int lStartRemaining, int lConserveRemaining, int lOffRemaining, double dBatt1Voltage, double dBatt1Current, double dBatt2Voltage, double dBatt2Current, int lSourceIndex, int bSourceReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportPowerStatusEvent reportpowerstatusEvent = new _DUBuffer7Events_ReportPowerStatusEvent(lStartRemaining, lConserveRemaining, lOffRemaining, dBatt1Voltage, dBatt1Current, dBatt2Voltage, dBatt2Current, lSourceIndex, bSourceReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportPowerStatus(this.parent, reportpowerstatusEvent);
        }
        
        public virtual void ReportAMPSpecial(int lThresholdIndex, int lRoutingIndex, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportAMPSpecialEvent reportampspecialEvent = new _DUBuffer7Events_ReportAMPSpecialEvent(lThresholdIndex, lRoutingIndex, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPSpecial(this.parent, reportampspecialEvent);
        }
        
        public virtual void ReportAMPPRO(int bLFREnabled, int bHTEnabled, double dHTTime, int bResEnhEnabled, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportAMPPROEvent reportampproEvent = new _DUBuffer7Events_ReportAMPPROEvent(bLFREnabled, bHTEnabled, dHTTime, bResEnhEnabled, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAMPPRO(this.parent, reportampproEvent);
        }
        
        public virtual void ReportHVSettings2(int bTargetValid, double dTargetVoltage, int bEnabled, int lRiseTime, int bPolarityPositive, int bPolarityReadonly, int lShutdownIndex, int lSourceIndex, int bNaIEnabled, int bNaIReadonly, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportHVSettings2Event reporthvsettings2Event = new _DUBuffer7Events_ReportHVSettings2Event(bTargetValid, dTargetVoltage, bEnabled, lRiseTime, bPolarityPositive, bPolarityReadonly, lShutdownIndex, lSourceIndex, bNaIEnabled, bNaIReadonly, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportHVSettings2(this.parent, reporthvsettings2Event);
        }
        
        public virtual void ReportAlpha(int vacuumState, double vacuumTarg, double vacuumAct, int bPulserOn, int plrVal, int digiOffset, int configChan, int bRcapOn) {
            _DUBuffer7Events_ReportAlphaEvent reportalphaEvent = new _DUBuffer7Events_ReportAlphaEvent(vacuumState, vacuumTarg, vacuumAct, bPulserOn, plrVal, digiOffset, configChan, bRcapOn);
            this.parent.RaiseOnReportAlpha(this.parent, reportalphaEvent);
        }
        
        public virtual void ReportAlphaEx(int lVacuumState, int bVacuumStateReadonly, double dVacuumTarg, double dVacuumAct, int bPulserOn, int lPulserAmplitude, int lDigiOffset, int lDisplayChannels, int bRcapOn, int bReadonly, int lElapsedMS) {
            _DUBuffer7Events_ReportAlphaExEvent reportalphaexEvent = new _DUBuffer7Events_ReportAlphaExEvent(lVacuumState, bVacuumStateReadonly, dVacuumTarg, dVacuumAct, bPulserOn, lPulserAmplitude, lDigiOffset, lDisplayChannels, bRcapOn, bReadonly, lElapsedMS);
            this.parent.RaiseOnReportAlphaEx(this.parent, reportalphaexEvent);
        }
    }
}
